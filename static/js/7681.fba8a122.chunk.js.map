{"version":3,"file":"static/js/7681.fba8a122.chunk.js","mappings":"2LAAMA,EAAU,uDAET,SAAeC,IAAc,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAanC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAbM,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACU,OAATJ,EAAO,GAAEE,EAAAE,KAAA,EACPC,MAAM,GAADC,OAAIf,EAAO,YAAY,CAC9BgB,KAAK,SAERC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,MAAM,IAC5BF,MAAK,SAAAG,GACFX,EAAOW,CACX,IACCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,KAAK,IAAC,cAAAb,EAAAc,OAAA,SAEvBhB,GAAI,wBAAAE,EAAAe,OAAA,GAAAlB,EAAA,MAEdL,MAAA,KAAAC,UAAA,C,ubCsCKuB,EAAiB,CACrBC,KAAM,GACNC,QAAS,GACTC,WAAY,GACZC,OAAQ,MACRC,UAAW,KACXC,QAAS,MAGLC,QAAqBC,EAAAA,EAAAA,MAGZ,SAASC,IAEtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,MAETC,GAAQC,EAAAA,EAAAA,IAAS,CAAEC,eAAgB,qBAEnCC,GAAWC,EAAAA,EAAAA,MAGjBC,GAA2BC,EAAAA,EAAAA,MAAnBC,EAACF,EAADE,EAMFC,GANgBH,EAAXI,YAMO,SAACC,GAAI,OAAKH,EAAEG,EAAM,GAEpCC,GAAkCC,EAAAA,EAAAA,UAASnB,GAAaoB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAE9BI,GAA8BL,EAAAA,EAAAA,UAAS1B,GAAegC,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/CE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAE1BG,GAAwCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GACpDE,GADmBD,EAAA,GAAiBA,EAAA,IACNV,EAAAA,EAAAA,WAAS,IAAMY,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAC7CE,GADcD,EAAA,GAAYA,EAAA,IACUZ,EAAAA,EAAAA,UAAS,IAAEc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA9BC,EAAA,GAAeA,EAAA,IAGhCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAjE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAU,EAAA,OAAAZ,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEOZ,EAAAA,EAAAA,KAAiB,KAAD,EAA/BiB,EAAMP,EAAA4D,KACZd,EAAavC,GAAQP,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA6D,GAAA7D,EAAA,SAGrBY,QAAQD,MAAM,4BAA2BX,EAAA6D,IAAS,yBAAA7D,EAAAe,OAAA,GAAAlB,EAAA,kBAErD,kBARc,OAAA8D,EAAAnE,MAAA,KAAAC,UAAA,KAWfiE,GACF,GAAG,IAYH,IAAMI,GAAa,CACjB,CAAEC,GAAI,OAAQC,MAAO1B,EAAU,SAC/B,CAAEyB,GAAI,SAAUC,MAAO1B,EAAU,gBACjC,CAAEyB,GAAI,SAAUC,MAAO1B,EAAU,gBAG7B2B,MACJhB,EAAQ5B,YAAa4B,EAAQ3B,UACzB2B,EAAQ5B,UAAU6C,UAAYjB,EAAQ3B,QAAQ4C,UAG9CC,GAAeC,EAAY,CAC/BC,UAAWxB,EACXyB,YAAYC,EAAAA,EAAAA,IAAczC,EAAM0C,MAAO1C,EAAM2C,SAC7CxB,QAAAA,EACAgB,UAAAA,KAOIS,GAAaP,GAAaQ,MAC9B7C,EAAM8C,KAAO9C,EAAM+C,YACnB/C,EAAM8C,KAAO9C,EAAM+C,YAAc/C,EAAM+C,aAGnCC,GAAchD,EAAMiD,MAAQ,GAAK,GAEjCC,KACF/B,EAAQhC,QACRgC,EAAQ/B,QAAQ+D,QACC,QAAnBhC,EAAQ7B,UACL6B,EAAQ5B,aAAe4B,EAAQ3B,QAE9B4D,IAAaf,GAAac,QAAUD,KAAcb,GAAac,OAE/DE,IAAgBC,EAAAA,EAAAA,cACpB,SAACnE,EAAMoE,GACLvD,EAAMwD,cACNpC,GAAW,SAACqC,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBD,GAAS,IAAAE,EAAAA,EAAAA,GAAA,GACXxE,EAAOoE,GAAK,GAEjB,GACA,CAACvD,IAGG4D,IAAkBN,EAAAA,EAAAA,cACtB,SAACrB,GACC,IAAM4B,EAAY9C,EAAU+C,QAAO,SAACC,GAAG,OAAKA,EAAI9B,KAAOA,CAAE,IACzDjB,EAAa6C,GAEb7D,EAAMgE,sBAAsBpB,GAAWO,OACzC,GACA,CAACP,GAAWO,OAAQnD,EAAOe,IAIvBkD,IAAgBX,EAAAA,EAAAA,cACpB,SAACrB,GACCnC,EAAOoE,KAAKC,EAAAA,EAAMC,UAAUC,QAAQC,KAAKrC,GAC3C,GACA,CAACnC,IAGGyE,IAAgBjB,EAAAA,EAAAA,cACpB,SAACrB,GACCnC,EAAOoE,KAAKC,EAAAA,EAAMC,UAAUC,QAAQG,QAAQvC,GAC9C,GACA,CAACnC,IAIG2E,IAAqBnB,EAAAA,EAAAA,cAAY,WACrClC,EAAWlC,EACb,GAAG,IAKH,OACEwF,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,UAAUhF,EAASiF,cAAuB,KAAKC,SAAA,EACtDC,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAChBC,QAAQ,OACRC,MAAO,CACL,CACE/F,KAAMqB,EAAU,OAChB2E,KAAMhB,EAAAA,EAAMC,UAAUgB,MAExB,CACEjG,KAAMqB,EAAU,YAGlB,CACErB,KAAMqB,EAAU,UAGpB6E,QACEN,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJC,UAAU,MACVC,SAAST,EAAAA,EAAAA,KAACU,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,EAACC,GAAI,CAAEC,YAAa,YACrED,GAAI,CAAEE,GAAI,GAAIhB,UAEdC,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CACLC,QAAS,kBAAM7F,EAASgE,EAAAA,EAAM8B,UAAUC,OAAO,EAC/CC,QAAQ,YACRC,WAAWrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAO,CAACC,KAAK,sBAAuBxB,SAE/CtE,EAAU,kBAMjBoF,GAAI,CACFW,GAAI,CAAEC,GAAI,EAAGC,GAAI,OAIrB/B,EAAAA,EAAAA,MAACgC,EAAAA,EAAI,CAAA5B,SAAA,EACHC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAoB,CACnBxF,QAASA,EACTyF,UAAWvD,GACXlB,UAAWA,GACX0E,gBAAgBC,EAAAA,EAAAA,KAAeC,KAAI,SAACC,GAAM,OAAKA,CAAM,IACrDC,mBAAmBC,EAAAA,EAAAA,KAAcH,KAAI,SAACC,GAAM,OAAKA,CAAM,MAGxD9D,KACC6B,EAAAA,EAAAA,KAACoC,EAAAA,EAAyB,CACxBhG,QAASA,EACTyF,UAAWvD,GAEX+D,eAAgB3C,GAEhB4C,QAAShF,GAAac,OACtByC,GAAI,CAAE0B,EAAG,IAAKC,GAAI,MAItBxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAc,CAAC5B,GAAI,CAAE6B,SAAU,WAAYC,SAAU,SAAU5C,UAC9DC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAS,CAAA7C,UACRJ,EAAAA,EAAAA,MAACkD,EAAAA,EAAK,CAACC,KAAM7H,EAAMiD,MAAQ,QAAU,SAAU2C,GAAI,CAAEkC,SAAU,KAAMhD,SAAA,EACnEC,EAAAA,EAAAA,KAACgD,EAAAA,EAAe,CACdrF,MAAO1C,EAAM0C,MACbC,QAAS3C,EAAM2C,QACfqF,UAAWhG,GACXiG,SAAUlH,EAAUoC,OACpB+E,YAAalI,EAAMmI,SAAShF,OAC5BiF,OAAQpI,EAAMoI,UAShB1D,EAAAA,EAAAA,MAAC2D,EAAAA,EAAS,CAAAvD,SAAA,CACPzC,GACEQ,MACC7C,EAAM8C,KAAO9C,EAAM+C,YACnB/C,EAAM8C,KAAO9C,EAAM+C,YAAc/C,EAAM+C,aAExCgE,KAAI,SAAChD,GAAG,OACPgB,EAAAA,EAAAA,KAACuD,EAAAA,EAAgB,CAEfvE,IAAKA,EACLoE,SAAUnI,EAAMmI,SAASI,SAASxE,EAAI9B,IACtCuG,YAAa,kBAAMxI,EAAMwI,YAAYzE,EAAI9B,GAAG,EAC5CwG,UAAW,kBAAMlE,GAAcR,EAAI9B,GAAG,EACtCyG,UAAW,kBAAMzE,GAAcF,EAAI9B,GAAG,EACtC0G,YAAa,kBAAM/E,GAAgBG,EAAI9B,GAAG,EAC1C2G,kBAAmB,kBAAM9J,QAAQC,IAAIgF,EAAI9B,GAAG,GAPvC8B,EAAI9B,GAQT,KAGN8C,EAAAA,EAAAA,KAAC8D,EAAAA,GAAc,CACbC,OAAQ9F,GACR+F,WAAWA,EAAAA,EAAAA,IAAU/I,EAAM8C,KAAM9C,EAAM+C,YAAahC,EAAUoC,WAGhE4B,EAAAA,EAAAA,KAACiE,EAAAA,GAAW,CAAC5F,SAAUA,gBAM/B2B,EAAAA,EAAAA,KAACkE,EAAAA,GAAqB,CACpBC,MAAO7G,GAAac,OACpBL,KAAM9C,EAAM8C,KACZC,YAAa/C,EAAM+C,YACnBoG,aAAcnJ,EAAMoJ,aACpBC,oBAAqBrJ,EAAMsJ,oBAC3BrG,MAAOjD,EAAMiD,MACbsG,cAAevJ,EAAMuJ,qBAOjC,CAEA,SAASjH,EAAWkH,GAAsC,IAAnCjH,EAASiH,EAATjH,UAAWC,EAAUgH,EAAVhH,WACtBrD,EADyCqK,EAAPrI,QAClChC,KAEFsK,EAAiBlH,EAAUwE,KAAI,SAAC2C,EAAIC,GAAK,MAAK,CAACD,EAAIC,EAAM,IA+C/D,OA7CAF,EAAeG,MAAK,SAACC,EAAGC,GACtB,IAAMpH,EAAQF,EAAWqH,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAVpH,EAAoBA,EACjBmH,EAAE,GAAKC,EAAE,EAClB,IAEAvH,EAAYkH,EAAe1C,KAAI,SAAC2C,GAAE,OAAKA,EAAG,EAAE,IAExCvK,IACFoD,EAAYA,EAAUuB,QACpB,SAACO,GAAO,OACwD,IAA9DA,EAAQ0F,OAAOC,cAAcC,QAAQ9K,EAAK6K,iBACM,IAAhD3F,EAAQ6F,OAAOD,QAAQ9K,EAAK6K,cAAqB,KAiChDzH,CACT,C,yIC1Wa,SAAS4H,EAAetI,GAQnC,IAPFkC,EAAGlC,EAAHkC,IAQYqG,GAPJvI,EAARsG,SACWtG,EAAX2G,YACS3G,EAAT4G,UACS5G,EAAT6G,UACW7G,EAAX8G,YACiB9G,EAAjB+G,kBAEqC7E,EAA7B9B,GAA6B8B,EAAzBqG,MAAML,EAAmBhG,EAAnBgG,OAAQG,EAAWnG,EAAXmG,QAEVG,EAAAA,EAAAA,MAEAC,EAAAA,EAAAA,KAEhB,OACEvF,EAAAA,EAAAA,KAAAwF,EAAAA,SAAA,CAAAzF,UACEJ,EAAAA,EAAAA,MAAC8F,EAAAA,EAAQ,CAACC,OAAK,EAAA3F,SAAA,EAEbC,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CAAA5F,SAAGsF,KAEbrF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CAAA5F,SAAGiF,KAEbhF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CAAA5F,SAAGoF,QAmDrB,C,oJCzEe,SAASS,EAAmB9I,GAMvC,IAYiBnB,EAjBnBS,EAAOU,EAAPV,QACAyF,EAAS/E,EAAT+E,UAOMgE,GANG/I,EAATM,UACcN,EAAdgF,eACiBhF,EAAjBoF,mBAEgBqD,EAAAA,EAAAA,MAEShH,EAAAA,EAAAA,cACvB,SAACuH,GACCjE,EAAU,OAAQiE,EAAMC,OAAOvH,MACjC,GACA,CAACqD,KAGKrG,GAAMD,EAAAA,EAAAA,MAANC,EAGR,OACEwE,EAAAA,EAAAA,KAAAwF,EAAAA,SAAA,CAAAzF,UACEC,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJyF,QAAS,EACTC,WAAY,CAAExE,GAAI,WAAYC,GAAI,UAClClB,UAAW,CACTiB,GAAI,SACJC,GAAI,OAENb,GAAI,CACF0B,EAAG,IACH2D,GAAI,CAAEzE,GAAI,IAAKC,GAAI,IACnB3B,UAIFC,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CAACC,UAAU,MAAMyF,WAAW,SAASD,QAAS,EAAGG,SAAU,EAAGtF,GAAI,CAAEuF,MAAO,GAAIrG,UACnFC,EAAAA,EAAAA,KAACqG,EAAAA,EAAS,CACRC,WAAS,EACT9H,MAAOpC,EAAQhC,KACfmM,SAAUV,EACVW,aAtBS7K,EAsBc,qBAtBLH,EAAEG,IAuBpB8K,WAAY,CACVC,gBACE1G,EAAAA,EAAAA,KAAC2G,EAAAA,EAAc,CAACjE,SAAS,QAAO3C,UAC9BC,EAAAA,EAAAA,KAACsB,EAAAA,EAAO,CAACC,KAAK,kBAAkBV,GAAI,CAAE+F,MAAO,6BA+C/D,C,iJClGe,SAASC,IACtB,OACElH,EAAAA,EAAAA,MAAA6F,EAAAA,SAAA,CAAAzF,SAAA,EACEC,EAAAA,EAAAA,KAAC8G,EAAAA,GAAM,CAAA/G,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,qBAGTC,EAAAA,EAAAA,KAACpF,EAAAA,EAAe,MAGtB,C,0SCHe,SAASwH,EAAyBtF,GAQ7C,IAPFV,EAAOU,EAAPV,QACAyF,EAAS/E,EAAT+E,UAEAQ,EAAcvF,EAAduF,eAEAC,EAAOxF,EAAPwF,QACGyE,GAAKC,EAAAA,EAAAA,GAAAlK,EAAAmK,GAEFC,GAAaC,EAAAA,EAAAA,IAAe/K,EAAQ5B,UAAW4B,EAAQ3B,SAgB7D,OACEkF,EAAAA,EAAAA,MAACY,EAAAA,GAAK5B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACqH,QAAS,KAASe,GAAK,IAAAhH,SAAA,EAC5BJ,EAAAA,EAAAA,MAACyH,EAAAA,EAAG,CAACvG,GAAI,CAAEwG,WAAY,SAAUtH,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,UAAAD,SAASuC,KACTtC,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACE,UAAU,OAAOzG,GAAI,CAAE+F,MAAO,iBAAkBW,GAAI,KAAOxH,SAAC,sBAKnEJ,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAAC4F,SAAU,EAAGH,QAAS,EAAGxF,UAAU,MAAMgH,SAAS,OAAOvB,WAAW,SAAQlG,SAAA,GAC9E3D,EAAQ/B,QAAQ+D,SACjB4B,EAAAA,EAAAA,KAACyH,EAAK,CAACtK,MAAM,WAAU4C,SACpB3D,EAAQ/B,QAAQ2H,KAAI,SAAC0F,GAAI,OACxB1H,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAEHxK,MAAOuK,EACP5E,KAAK,QACL8E,SAAU,kBA/BI,SAACC,GAC3B,IAAMC,EAAW1L,EAAQ/B,QAAQ0E,QAAO,SAAC2I,GAAI,OAAKA,IAASG,CAAU,IACrEhG,EAAU,UAAWiG,EACvB,CA4B8BC,CAAoBL,EAAK,GAHpCA,EAIL,MAKY,QAAnBtL,EAAQ7B,SACPyF,EAAAA,EAAAA,KAACyH,EAAK,CAACtK,MAAM,UAAS4C,UACpBC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAAC7E,KAAK,QAAQ3F,MAAOf,EAAQ7B,OAAQqN,SAlCzB,WACzB/F,EAAU,SAAU,MACtB,MAoCOzF,EAAQ5B,WAAa4B,EAAQ3B,UAC5BuF,EAAAA,EAAAA,KAACyH,EAAK,CAACtK,MAAM,QAAO4C,UAClBC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAAC7E,KAAK,QAAQ3F,MAAO+J,EAAYU,SApCvB,WACvB/F,EAAU,YAAa,MACvBA,EAAU,UAAW,KACvB,OAqCM7B,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CACL4F,MAAM,QACN3F,QAASoB,EACThB,WAAWrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAO,CAACC,KAAK,+BAAgCxB,SAC1D,gBAMT,CAWA,SAAS0H,EAAKhD,GAAqC,IAAlCtH,EAAKsH,EAALtH,MAAO4C,EAAQ0E,EAAR1E,SAAUc,EAAE4D,EAAF5D,GAAOkG,GAAKC,EAAAA,EAAAA,GAAAvC,EAAAuD,GAC5C,OACErI,EAAAA,EAAAA,MAACY,EAAAA,GAAK5B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACJ2I,UAAWW,EAAAA,EACX7G,QAAQ,WACR4E,QAAS,EACTxF,UAAU,MACVK,IAAElC,EAAAA,EAAAA,GAAA,CACA4D,EAAG,EACH2F,aAAc,EACdvF,SAAU,SACV7B,YAAa,UACVD,IAEDkG,GAAK,IAAAhH,SAAA,EAETC,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACE,UAAU,OAAOzG,GAAI,CAAEwG,WAAY,aAActH,SACnD5C,KAGH6C,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CAACyF,QAAS,EAAGxF,UAAU,MAAMgH,SAAS,OAAMzH,SAC/CA,OAIT,C","sources":["data-access/products.js","screens/components/products/all/ProductListView.js","screens/components/products/all/ProductTableRow.js","screens/components/products/all/ProductTableToolbar.js","screens/products/all/ProductListView.js","sections/invoice/invoice-table-filters-result.js"],"sourcesContent":["const baseUrl = 'https://invoicecollectionsystemapi.azurewebsites.net';\r\n\r\nexport async function getAllProducts() {\r\n    let list = [];\r\n    await fetch(`${baseUrl}/Product`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n        list = invoices;\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n\r\n}\r\nexport async function deleteProduct(id) {\r\n    let success = true;\r\n    await fetch(`${baseUrl}/Product/${id}/Delete`, {\r\n        mode:'cors',\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        Cache: 'default'\r\n    })\r\n    .then(res => {\r\n        // Check if the status code is 200 or 204\r\n        if (res.ok) {\r\n          // Check if the status code is 200 or 204\r\n          if (res.status === 204) {\r\n            return null; // Handle 204 No Content\r\n          }  if (res.status === 200) {\r\n            return res.json(); // Parse JSON for other successful responses\r\n          } \r\n\r\n          throw new Error(`Unexpected status code: ${res.status}`);\r\n          \r\n        } \r\n\r\n        throw new Error('Network response was not ok');\r\n      })\r\n    .then(invoices => {\r\n        console.log(\"Deleted successfuly\")\r\n    })\r\n    .catch(error => {\r\n        console.log(error) \r\n        success = false;\r\n    })\r\n\r\n    return success;\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { useLocales } from 'src/locales';\r\nimport { useState, useCallback, useEffect } from 'react';\r\n// @mui\r\nimport Card from '@mui/material/Card';\r\nimport Table from '@mui/material/Table';\r\nimport Container from '@mui/material/Container';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Stack from '@mui/material/Stack';\r\nimport Divider  from '@mui/material/Divider';\r\nimport Button from '@mui/material/Button';\r\n\r\n// @mui Dialog\r\n\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n// hooks\r\n// utils\r\n// _mock\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport { RouterLink } from 'src/routes/components';\r\nimport Scrollbar from 'src/components/scrollbar';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TablePaginationCustom,\r\n} from 'src/components/table';\r\n\r\n// DATA ACCESS\r\nimport { getAllInvoices } from 'src/data-access/invoice'\r\n\r\nimport { _departments } from 'src/lists/departments'\r\nimport { _statusList } from 'src/lists/paidStatus'\r\nimport { getAllProducts } from 'src/data-access/products';\r\n//\r\nimport InvoiceTableFiltersResult from 'src/sections/invoice/invoice-table-filters-result';\r\nimport CustomerTableRow from './ProductTableRow';\r\nimport CustomerTableToolbar from './ProductTableToolbar';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n\r\n\r\nconst defaultFilters = {\r\n  name: '',\r\n  service: [],\r\n  paidStatus: [],\r\n  status: 'all',\r\n  startDate: null,\r\n  endDate: null,\r\n};\r\n\r\nconst dataGridData = await getAllInvoices()\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ProductListView() {\r\n\r\n  const settings = useSettingsContext();\r\n\r\n  const router = useRouter();\r\n\r\n  const table = useTable({ defaultOrderBy: 'issueInvoiceDate' });\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const { t, currentLang } = useLocales();\r\n\r\n  // Arabic language: currentLang.value === 'ar'\r\n  // English language: currentLang.value === 'en'\r\n\r\n\r\n  const Translate = (text) => t(text);\r\n\r\n  const [tableData, setTableData] = useState(dataGridData);\r\n\r\n  const [filters, setFilters] = useState(defaultFilters);\r\n  \r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await getAllProducts();\r\n        setTableData(result);\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n      }\r\n    };\r\n\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const unlisten = history.listen(() => {\r\n  //     // This will be called whenever the URL changes\r\n  //     setRefreshKey((prevKey) => prevKey + 1);\r\n  //   });\r\n\r\n  //   // Cleanup the listener when the component unmounts\r\n  //   return () => unlisten();\r\n  // }, [history]);\r\n\r\n  const TABLE_HEAD = [\r\n    { id: 'code', label: Translate(\"code\")  },\r\n    { id: 'nameEn', label: Translate(\"nameEnglish\")  },\r\n    { id: 'nameAr', label: Translate(\"nameArabic\")  },\r\n  ];\r\n\r\n  const dateError =\r\n    filters.startDate && filters.endDate\r\n      ? filters.startDate.getTime() > filters.endDate.getTime()\r\n      : false;\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(table.order, table.orderBy),\r\n    filters,\r\n    dateError,\r\n  });\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshKey((prevKey) => prevKey + 1);\r\n  };\r\n\r\n  const dataInPage = dataFiltered.slice(\r\n    table.page * table.rowsPerPage,\r\n    table.page * table.rowsPerPage + table.rowsPerPage\r\n  );\r\n\r\n  const denseHeight = table.dense ? 56 : 76;\r\n\r\n  const canReset =\r\n    !!filters.name ||\r\n    !!filters.service.length ||\r\n    filters.status !== 'all' ||\r\n    (!!filters.startDate && !!filters.endDate);\r\n\r\n  const notFound = (!dataFiltered.length && canReset) || !dataFiltered.length;\r\n\r\n  const handleFilters = useCallback(\r\n    (name, value) => {\r\n      table.onResetPage();\r\n      setFilters((prevState) => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    },\r\n    [table]\r\n  );\r\n\r\n  const handleDeleteRow = useCallback(\r\n    (id) => {\r\n      const deleteRow = tableData.filter((row) => row.id !== id);\r\n      setTableData(deleteRow);\r\n\r\n      table.onUpdatePageDeleteRow(dataInPage.length);\r\n    },\r\n    [dataInPage.length, table, tableData]\r\n  );\r\n\r\n\r\n  const handleEditRow = useCallback(\r\n    (id) => {\r\n      router.push(paths.dashboard.invoice.edit(id));\r\n    },\r\n    [router]\r\n  );\r\n\r\n  const handleViewRow = useCallback(\r\n    (id) => {\r\n      router.push(paths.dashboard.invoice.details(id));\r\n    },\r\n    [router]\r\n  );\r\n\r\n\r\n  const handleResetFilters = useCallback(() => {\r\n    setFilters(defaultFilters);\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'lg'}>\r\n        <CustomBreadcrumbs\r\n          heading=\"List\"\r\n          links={[\r\n            {\r\n              name: Translate(\"app\"),\r\n              href: paths.dashboard.root,\r\n            },\r\n            {\r\n              name: Translate(\"product\"),\r\n              \r\n            },\r\n            {\r\n              name: Translate(\"list\"),\r\n            },\r\n          ]}\r\n          action= {\r\n            <Stack\r\n              direction=\"row\"\r\n              divider={<Divider orientation=\"vertical\" flexItem sx={{ borderStyle: 'dashed' }} />}\r\n              sx={{ py: 2 }}\r\n            >\r\n              <Button\r\n                onClick={() => navigate(paths.customers.create)}\r\n                variant=\"contained\"\r\n                startIcon={<Iconify icon=\"mingcute:add-line\" />}\r\n              >\r\n                {Translate(\"newProduct\")}\r\n              </Button>\r\n              \r\n          </Stack>\r\n            \r\n          }\r\n          sx={{\r\n            mb: { xs: 3, md: 5 },\r\n          }}\r\n        />\r\n\r\n        <Card>\r\n          <CustomerTableToolbar\r\n            filters={filters}\r\n            onFilters={handleFilters}\r\n            dateError={dateError}\r\n            serviceOptions={_departments().map((option) => option)}\r\n            paidStatusOptions={_statusList().map((option) => option)}\r\n          />\r\n\r\n          {canReset && (\r\n            <InvoiceTableFiltersResult\r\n              filters={filters}\r\n              onFilters={handleFilters}\r\n              //\r\n              onResetFilters={handleResetFilters}\r\n              //\r\n              results={dataFiltered.length}\r\n              sx={{ p: 2.5, pt: 0 }}\r\n            />\r\n          )}\r\n\r\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\r\n            <Scrollbar>\r\n              <Table size={table.dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\r\n                <TableHeadCustom\r\n                  order={table.order}\r\n                  orderBy={table.orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={tableData.length}\r\n                  numSelected={table.selected.length}\r\n                  onSort={table.onSort}\r\n                  // onSelectAllRows={(checked) =>\r\n                  //   table.onSelectAllRows(\r\n                  //     checked,\r\n                  //     tableData.map((row) => row.id)\r\n                  //   )\r\n                  // }\r\n                />\r\n\r\n                <TableBody>\r\n                  {dataFiltered\r\n                    .slice(\r\n                      table.page * table.rowsPerPage,\r\n                      table.page * table.rowsPerPage + table.rowsPerPage\r\n                    )\r\n                    .map((row) => (\r\n                      <CustomerTableRow\r\n                        key={row.id}\r\n                        row={row}\r\n                        selected={table.selected.includes(row.id)}\r\n                        onSelectRow={() => table.onSelectRow(row.id)}\r\n                        onViewRow={() => handleViewRow(row.id)}\r\n                        onEditRow={() => handleEditRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                        handleOpenInquiry={() => console.log(row.id)}\r\n                      />\r\n                    ))}\r\n\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(table.page, table.rowsPerPage, tableData.length)}\r\n                  />\r\n\r\n                  <TableNoData notFound={notFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </Scrollbar>\r\n          </TableContainer>\r\n\r\n          <TablePaginationCustom\r\n            count={dataFiltered.length}\r\n            page={table.page}\r\n            rowsPerPage={table.rowsPerPage}\r\n            onPageChange={table.onChangePage}\r\n            onRowsPerPageChange={table.onChangeRowsPerPage}\r\n            dense={table.dense}\r\n            onChangeDense={table.onChangeDense}\r\n          />\r\n        </Card>\r\n      </Container>\r\n\r\n    \r\n  );\r\n}\r\n\r\nfunction applyFilter({ inputData, comparator, filters }) {\r\n    const { name } = filters;\r\n  \r\n    const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n  \r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n  \r\n    inputData = stabilizedThis.map((el) => el[0]);\r\n  \r\n    if (name) {\r\n      inputData = inputData.filter(\r\n        (invoice) =>\r\n          invoice.nameEn.toLowerCase().indexOf(name.toLowerCase()) !== -1 ||\r\n          invoice.nameAr.indexOf(name.toLowerCase()) !== -1\r\n          \r\n          // invoice.invoiceTo.name.toLowerCase().indexOf(name.toLowerCase()) !== -1\r\n      );\r\n    }\r\n  \r\n    // if (status !== 'all') {\r\n    //   inputData = inputData.filter((invoice) => invoice.status === status);\r\n    // }\r\n  \r\n    // if (service.length) {\r\n    //   inputData = inputData.filter((invoice) =>\r\n    //     // service.map((serviceName) => serviceName.toLowerCase()).includes(invoice.department)\r\n    //     service.includes('All') || service.includes(invoice.department)\r\n    //   );\r\n    // }\r\n    \r\n    // if (paidStatus.length) {\r\n    //   inputData = inputData.filter((invoice) =>\r\n    //     paidStatus.includes('All') || paidStatus.map((option) => option.toLowerCase()).includes(invoice.paidStatus)\r\n    //   );\r\n    // }\r\n\r\n    // if (!dateError) {\r\n    //   if (startDate && endDate) {\r\n    //     inputData = inputData.filter(\r\n    //       (invoice) =>\r\n    //         fTimestamp(invoice.issueInvoiceDate) >= fTimestamp(startDate) &&\r\n    //         fTimestamp(invoice.issueInvoiceDate) <= fTimestamp(endDate)\r\n    //     );\r\n    //   }\r\n    // }\r\n  \r\n    return inputData;\r\n  }","import PropTypes from 'prop-types';\r\n// @mui\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableCell from '@mui/material/TableCell';\r\n// hooks\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n// utils\r\n// components\r\nimport { usePopover } from 'src/components/custom-popover';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ProductTableRow({\r\n  row,\r\n  selected,\r\n  onSelectRow,\r\n  onViewRow,\r\n  onEditRow,\r\n  onDeleteRow,\r\n  handleOpenInquiry,\r\n}) {\r\n  const { id, code, nameEn, nameAr } = row;\r\n\r\n  const confirm = useBoolean();\r\n\r\n  const popover = usePopover();\r\n\r\n  return (\r\n    <>\r\n      <TableRow hover >\r\n        \r\n        <TableCell >{code}</TableCell>\r\n        \r\n        <TableCell >{nameEn}</TableCell>\r\n\r\n        <TableCell >{nameAr}</TableCell>\r\n\r\n        {/* <IconButton onClick={popover.onOpen}>\r\n            <Iconify icon=\"eva:more-vertical-fill\" />\r\n          </IconButton> */}\r\n\r\n      </TableRow>\r\n\r\n      {/* <CustomPopover\r\n        open={popover.open}\r\n        onClose={popover.onClose}\r\n        arrow=\"right-top\"\r\n        sx={{ width: 160 }}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            onViewRow();\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:eye-bold\" />\r\n          View\r\n        </MenuItem>\r\n\r\n        <Divider sx={{ borderStyle: 'solid' }} />\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            handleOpenInquiry();\r\n            // confirm.onTrue();\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"bx:file\" />\r\n          Inquiry\r\n        </MenuItem>\r\n      </CustomPopover>\r\n\r\n      <ConfirmDialog\r\n        open={confirm.value}\r\n        onClose={confirm.onFalse}\r\n        title=\"Delete\"\r\n        content=\"Are you sure want to delete?\"\r\n        action={\r\n          <Button variant=\"contained\" color=\"error\" onClick={onDeleteRow}>\r\n            Delete\r\n          </Button>\r\n        }\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nProductTableRow.propTypes = {\r\n  onDeleteRow: PropTypes.func,\r\n  onEditRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n  onViewRow: PropTypes.func,\r\n  handleOpenInquiry: PropTypes.func,\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useCallback } from 'react';\r\nimport { useLocales } from 'src/locales';\r\n// @mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport { usePopover } from 'src/components/custom-popover';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ProductTableToolbar({\r\n  filters,\r\n  onFilters,\r\n  dateError,\r\n  serviceOptions,\r\n  paidStatusOptions,\r\n}) {\r\n  const popover = usePopover();\r\n\r\n  const handleFilterName = useCallback(\r\n    (event) => {\r\n      onFilters('name', event.target.value);\r\n    },\r\n    [onFilters]\r\n  );\r\n\r\n  const { t } = useLocales();\r\n\r\n  const Translate = (text) => t(text);\r\n  return (\r\n    <>\r\n      <Stack\r\n        spacing={2}\r\n        alignItems={{ xs: 'flex-end', md: 'center' }}\r\n        direction={{\r\n          xs: 'column',\r\n          md: 'row',\r\n        }}\r\n        sx={{\r\n          p: 2.5,\r\n          pr: { xs: 2.5, md: 1 },\r\n        }}\r\n      >\r\n      \r\n\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} flexGrow={1} sx={{ width: 1 }}>\r\n          <TextField\r\n            fullWidth\r\n            value={filters.name}\r\n            onChange={handleFilterName}\r\n            placeholder={Translate(\"searchCustomerName\")}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          {/* <IconButton onClick={popover.onOpen}>\r\n            <Iconify icon=\"eva:more-vertical-fill\" />\r\n          </IconButton> */}\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* <CustomPopover\r\n        open={popover.open}\r\n        onClose={popover.onClose}\r\n        arrow=\"right-top\"\r\n        sx={{ width: 140 }}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:printer-minimalistic-bold\" />\r\n          Print\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:import-bold\" />\r\n          Import\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:export-bold\" />\r\n          Export\r\n        </MenuItem>\r\n      </CustomPopover> */}\r\n    </>\r\n  );\r\n}\r\n\r\nProductTableToolbar.propTypes = {\r\n  dateError: PropTypes.bool,\r\n  filters: PropTypes.object,\r\n  onFilters: PropTypes.func,\r\n  serviceOptions: PropTypes.array,\r\n  paidStatusOptions: PropTypes.array,\r\n};\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport ProductListView from 'src/screens/components/products/all/ProductListView';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ProductListViewMain() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Product List</title>\r\n      </Helmet>\r\n\r\n      <ProductListView />\r\n    </>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\n// @mui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n// components\nimport Iconify from 'src/components/iconify';\nimport { shortDateLabel } from 'src/components/custom-date-range-picker';\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceTableFiltersResult({\n  filters,\n  onFilters,\n  //\n  onResetFilters,\n  //\n  results,\n  ...other\n}) {\n  const shortLabel = shortDateLabel(filters.startDate, filters.endDate);\n\n  const handleRemoveService = (inputValue) => {\n    const newValue = filters.service.filter((item) => item !== inputValue);\n    onFilters('service', newValue);\n  };\n\n  const handleRemoveStatus = () => {\n    onFilters('status', 'all');\n  };\n\n  const handleRemoveDate = () => {\n    onFilters('startDate', null);\n    onFilters('endDate', null);\n  };\n\n  return (\n    <Stack spacing={1.5} {...other}>\n      <Box sx={{ typography: 'body2' }}>\n        <strong>{results}</strong>\n        <Box component=\"span\" sx={{ color: 'text.secondary', ml: 0.25 }}>\n          results found\n        </Box>\n      </Box>\n\n      <Stack flexGrow={1} spacing={1} direction=\"row\" flexWrap=\"wrap\" alignItems=\"center\">\n        {!!filters.service.length && (\n          <Block label=\"Service:\">\n            {filters.service.map((item) => (\n              <Chip\n                key={item}\n                label={item}\n                size=\"small\"\n                onDelete={() => handleRemoveService(item)}\n              />\n            ))}\n          </Block>\n        )}\n\n        {filters.status !== 'all' && (\n          <Block label=\"Status:\">\n            <Chip size=\"small\" label={filters.status} onDelete={handleRemoveStatus} />\n          </Block>\n        )}\n\n        {filters.startDate && filters.endDate && (\n          <Block label=\"Date:\">\n            <Chip size=\"small\" label={shortLabel} onDelete={handleRemoveDate} />\n          </Block>\n        )}\n\n        <Button\n          color=\"error\"\n          onClick={onResetFilters}\n          startIcon={<Iconify icon=\"solar:trash-bin-trash-bold\" />}\n        >\n          Clear\n        </Button>\n      </Stack>\n    </Stack>\n  );\n}\n\nInvoiceTableFiltersResult.propTypes = {\n  filters: PropTypes.object,\n  onFilters: PropTypes.func,\n  onResetFilters: PropTypes.func,\n  results: PropTypes.number,\n};\n\n// ----------------------------------------------------------------------\n\nfunction Block({ label, children, sx, ...other }) {\n  return (\n    <Stack\n      component={Paper}\n      variant=\"outlined\"\n      spacing={1}\n      direction=\"row\"\n      sx={{\n        p: 1,\n        borderRadius: 1,\n        overflow: 'hidden',\n        borderStyle: 'dashed',\n        ...sx,\n      }}\n      {...other}\n    >\n      <Box component=\"span\" sx={{ typography: 'subtitle2' }}>\n        {label}\n      </Box>\n\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {children}\n      </Stack>\n    </Stack>\n  );\n}\n\nBlock.propTypes = {\n  children: PropTypes.node,\n  label: PropTypes.string,\n  sx: PropTypes.object,\n};\n"],"names":["baseUrl","getAllProducts","_getAllProducts","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","list","wrap","_context","prev","next","fetch","concat","mode","then","result","json","invoices","catch","error","console","log","abrupt","stop","defaultFilters","name","service","paidStatus","status","startDate","endDate","dataGridData","getAllInvoices","ProductListView","settings","useSettingsContext","router","useRouter","table","useTable","defaultOrderBy","navigate","useNavigate","_useLocales","useLocales","t","Translate","currentLang","text","_useState","useState","_useState2","_slicedToArray","tableData","setTableData","_useState3","_useState4","filters","setFilters","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","useEffect","fetchData","_ref","sent","t0","TABLE_HEAD","id","label","dateError","getTime","dataFiltered","applyFilter","inputData","comparator","getComparator","order","orderBy","dataInPage","slice","page","rowsPerPage","denseHeight","dense","canReset","length","notFound","handleFilters","useCallback","value","onResetPage","prevState","_objectSpread","_defineProperty","handleDeleteRow","deleteRow","filter","row","onUpdatePageDeleteRow","handleEditRow","push","paths","dashboard","invoice","edit","handleViewRow","details","handleResetFilters","_jsxs","Container","maxWidth","themeStretch","children","_jsx","CustomBreadcrumbs","heading","links","href","root","action","Stack","direction","divider","Divider","orientation","flexItem","sx","borderStyle","py","Button","onClick","customers","create","variant","startIcon","Iconify","icon","mb","xs","md","Card","CustomerTableToolbar","onFilters","serviceOptions","_departments","map","option","paidStatusOptions","_statusList","InvoiceTableFiltersResult","onResetFilters","results","p","pt","TableContainer","position","overflow","Scrollbar","Table","size","minWidth","TableHeadCustom","headLabel","rowCount","numSelected","selected","onSort","TableBody","CustomerTableRow","includes","onSelectRow","onViewRow","onEditRow","onDeleteRow","handleOpenInquiry","TableEmptyRows","height","emptyRows","TableNoData","TablePaginationCustom","count","onPageChange","onChangePage","onRowsPerPageChange","onChangeRowsPerPage","onChangeDense","_ref2","stabilizedThis","el","index","sort","a","b","nameEn","toLowerCase","indexOf","nameAr","ProductTableRow","code","useBoolean","usePopover","_Fragment","TableRow","hover","TableCell","ProductTableToolbar","handleFilterName","event","target","spacing","alignItems","pr","flexGrow","width","TextField","fullWidth","onChange","placeholder","InputProps","startAdornment","InputAdornment","color","ProductListViewMain","Helmet","other","_objectWithoutProperties","_excluded","shortLabel","shortDateLabel","Box","typography","component","ml","flexWrap","Block","item","Chip","onDelete","inputValue","newValue","handleRemoveService","_excluded2","Paper","borderRadius"],"sourceRoot":""}