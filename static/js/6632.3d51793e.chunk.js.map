{"version":3,"file":"static/js/6632.3d51793e.chunk.js","mappings":"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","sources":["components/custom-dialog/confirm-dialog.js","data-access/customers.js","screens/components/customer/all/CustomerListView.js","screens/components/customer/all/CustomerTableRow.js","screens/components/customer/all/CustomerTableToolbar.js","screens/customer/all/CustomerListView.js","sections/invoice/invoice-table-filters-result.js"],"sourcesContent":["import PropTypes from 'prop-types';\n// @mui\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\n\n// ----------------------------------------------------------------------\n\nexport default function ConfirmDialog({ title, content, action, open, onClose, ...other }) {\n  return (\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={onClose} {...other}>\n      <DialogTitle sx={{ pb: 2 }}>{title}</DialogTitle>\n\n      {content && <DialogContent sx={{ typography: 'body2' }}> {content} </DialogContent>}\n\n      <DialogActions>\n        {action}\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onClose}>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nConfirmDialog.propTypes = {\n  action: PropTypes.node,\n  content: PropTypes.node,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  title: PropTypes.string,\n};\n","const baseUrl = 'https://invoicecollectionsystemapi.azurewebsites.net';\r\n\r\nexport async function getAllCustomers() {\r\n    let list = [];\r\n    await fetch(`${baseUrl}/customer`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n        list = invoices;\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n\r\n}\r\n\r\nexport async function GetAllCustomersWithAll() {\r\n\r\n    const list = [{\r\n        \"id\": \"0\",\r\n        \"customerCode\": \"All\",\r\n        \"customerNameEn\": \"All\",\r\n        \"customerNameAr\": \"All\",\r\n    }];\r\n    await fetch(`${baseUrl}/customer`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n\r\n        // Add all invoices to the list\r\n        list.push(...invoices);\r\n    })\r\n    .catch(error => console.log())\r\n    console.log('List: '. list);\r\n    return list\r\n\r\n}\r\n\r\nexport async function getSalesPersonList() {\r\n    let list = []\r\n    await fetch(`${baseUrl}/api/User/UsersNameByRole/sales`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n\r\n}\r\n\r\nexport async  function getCustomerById(id) {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/Customer/${id}`, {\r\n            mode: 'cors'\r\n        });\r\n\r\n        if (response.ok) {\r\n            const invoice = await response.json();\r\n            return invoice;\r\n        } \r\n            // Handle non-successful response here if needed.\r\n            console.error(`Failed to fetch invoice: ${response.status} - ${response.statusText}`);\r\n        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return {}; // Return an empty object by default or handle errors as needed.\r\n    \r\n}\r\n\r\nexport async function deleteCustomer(id) {\r\n    let success = true;\r\n    await fetch(`${baseUrl}/Customer/${id}/Delete`, {\r\n        mode:'cors',\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        Cache: 'default'\r\n    })\r\n    .then(res => {\r\n        // Check if the status code is 200 or 204\r\n        if (res.ok) {\r\n          // Check if the status code is 200 or 204\r\n          if (res.status === 204) {\r\n            return null; // Handle 204 No Content\r\n          }  if (res.status === 200) {\r\n            return res.json(); // Parse JSON for other successful responses\r\n          } \r\n\r\n          throw new Error(`Unexpected status code: ${res.status}`);\r\n          \r\n        } \r\n\r\n        throw new Error('Network response was not ok');\r\n      })\r\n    .then(invoices => {\r\n        console.log(\"Deleted successfuly\")\r\n    })\r\n    .catch(error => {\r\n        console.log(error) \r\n        success = false;\r\n    })\r\n\r\n    return success;\r\n}","import * as React from 'react';\r\nimport { useLocales } from 'src/locales';\r\nimport { useState, useCallback, useEffect } from 'react';\r\n// @mui\r\nimport Card from '@mui/material/Card';\r\nimport Table from '@mui/material/Table';\r\nimport Container from '@mui/material/Container';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Stack from '@mui/material/Stack';\r\nimport Divider  from '@mui/material/Divider';\r\nimport Button from '@mui/material/Button';\r\n\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport { RouterLink } from 'src/routes/components';\r\nimport Scrollbar from 'src/components/scrollbar';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TablePaginationCustom,\r\n} from 'src/components/table';\r\n\r\n// DATA ACCESS\r\nimport { getAllInvoices } from 'src/data-access/invoice'\r\n\r\nimport { _departments } from 'src/lists/departments'\r\nimport { _statusList } from 'src/lists/paidStatus'\r\nimport { getAllCustomers, deleteCustomer } from 'src/data-access/customers';\r\n//\r\nimport InvoiceTableFiltersResult from 'src/sections/invoice/invoice-table-filters-result';\r\nimport CustomerTableRow from './CustomerTableRow';\r\nimport CustomerTableToolbar from './CustomerTableToolbar';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n\r\n\r\nconst defaultFilters = {\r\n  name: '',\r\n  service: [],\r\n  paidStatus: [],\r\n  status: 'all',\r\n  startDate: null,\r\n  endDate: null,\r\n};\r\n\r\nconst dataGridData = await getAllInvoices()\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomerListView() {\r\n\r\n  const settings = useSettingsContext();\r\n\r\n  const router = useRouter();\r\n\r\n  const table = useTable({ defaultOrderBy: 'issueInvoiceDate' });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { t } = useLocales()\r\n  const Translate = (text) => t(text);\r\n\r\n  const [tableData, setTableData] = useState(dataGridData);\r\n  const [filters, setFilters] = useState(defaultFilters);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await getAllCustomers();\r\n        setTableData(result);\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [refresh]);\r\n\r\n  const TABLE_HEAD = [\r\n    { id: 'customerCode', label: Translate(\"customerCode\")  },\r\n    { id: 'customerNameEn', label: Translate(\"customerNameEn\")  },\r\n    { id: 'customerNameAr', label: Translate(\"customerNameAr\")  },\r\n    { id: '' },\r\n  ];\r\n\r\n  const dateError =\r\n    filters.startDate && filters.endDate\r\n      ? filters.startDate.getTime() > filters.endDate.getTime()\r\n      : false;\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(table.order, table.orderBy),\r\n    filters,\r\n    dateError,\r\n  });\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshKey((prevKey) => prevKey + 1);\r\n  };\r\n\r\n  const dataInPage = dataFiltered.slice(\r\n    table.page * table.rowsPerPage,\r\n    table.page * table.rowsPerPage + table.rowsPerPage\r\n  );\r\n\r\n  const denseHeight = table.dense ? 56 : 76;\r\n\r\n  const canReset =\r\n    !!filters.name ||\r\n    !!filters.service.length ||\r\n    filters.status !== 'all' ||\r\n    (!!filters.startDate && !!filters.endDate);\r\n\r\n  const notFound = (!dataFiltered.length && canReset) || !dataFiltered.length;\r\n\r\n  const handleFilters = useCallback(\r\n    (name, value) => {\r\n      table.onResetPage();\r\n      setFilters((prevState) => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    },\r\n    [table]\r\n  );\r\n\r\n  // const handleDeleteRow = useCallback(\r\n  //   (id) => {\r\n  //     const deleteRow = tableData.filter((row) => row.id !== id);\r\n  //     setTableData(deleteRow);\r\n\r\n  //     table.onUpdatePageDeleteRow(dataInPage.length);\r\n  //   },\r\n  //   [dataInPage.length, table, tableData]\r\n  // );\r\n\r\n  const handleDeleteRow = (id) => {\r\n    let success = true;\r\n    const deleteData = async () => {\r\n      try {\r\n        success = await deleteCustomer(id);          \r\n      } catch (error) {\r\n        console.error('Error fetching invoices:', error);\r\n      } \r\n      console.log(\"Success status: \", success);\r\n      if (success) {\r\n        // Fetch data only if deletion was successful\r\n        try {\r\n          const result = await getAllInvoices();\r\n          setTableData(result);\r\n        } catch (error) {\r\n          console.error('Error fetching invoices:', error);\r\n        }\r\n    \r\n        // Update refresh state after fetching data\r\n        setRefresh(!refresh);\r\n      }\r\n    };\r\n    \r\n    deleteData();\r\n};\r\n\r\n\r\n  const handleEditRow = useCallback(\r\n    (id) => {\r\n      console.log(paths.customers.edit(id));\r\n      router.push(paths.customers.edit(id));\r\n    },\r\n    [router]\r\n  );\r\n\r\n  const handleViewRow = useCallback(\r\n    (id) => {\r\n      router.push(paths.dashboard.invoice.details(id));\r\n    },\r\n    [router]\r\n  );\r\n\r\n\r\n  const handleResetFilters = useCallback(() => {\r\n    setFilters(defaultFilters);\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'lg'}>\r\n        <CustomBreadcrumbs\r\n          heading=\"List\"\r\n          links={[\r\n            {\r\n              name: Translate(\"app\"),\r\n              href: paths.dashboard.root,\r\n            },\r\n            {\r\n              name: Translate(\"customer\"),\r\n              \r\n            },\r\n            {\r\n              name: Translate(\"list\"),\r\n            },\r\n          ]}\r\n          action= {\r\n            <Stack\r\n              direction=\"row\"\r\n              divider={<Divider orientation=\"vertical\" flexItem sx={{ borderStyle: 'dashed' }} />}\r\n              sx={{ py: 2 }}\r\n            >\r\n              <Button\r\n                onClick={() => navigate(paths.customers.create)}\r\n                variant=\"contained\"\r\n                startIcon={<Iconify icon=\"mingcute:add-line\" />}\r\n              >\r\n                {Translate(\"newCustomer\")}\r\n              </Button>\r\n              \r\n          </Stack>\r\n            \r\n          }\r\n          sx={{\r\n            mb: { xs: 3, md: 5 },\r\n          }}\r\n        />\r\n\r\n        <Card>\r\n          <CustomerTableToolbar\r\n            filters={filters}\r\n            onFilters={handleFilters}\r\n            dateError={dateError}\r\n            serviceOptions={_departments().map((option) => option)}\r\n            paidStatusOptions={_statusList().map((option) => option)}\r\n          />\r\n\r\n          {canReset && (\r\n            <InvoiceTableFiltersResult\r\n              filters={filters}\r\n              onFilters={handleFilters}\r\n              //\r\n              onResetFilters={handleResetFilters}\r\n              //\r\n              results={dataFiltered.length}\r\n              sx={{ p: 2.5, pt: 0 }}\r\n            />\r\n          )}\r\n\r\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\r\n            <Scrollbar>\r\n              <Table size={table.dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\r\n                <TableHeadCustom\r\n                  order={table.order}\r\n                  orderBy={table.orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={tableData.length}\r\n                  numSelected={table.selected.length}\r\n                  onSort={table.onSort}\r\n                  // onSelectAllRows={(checked) =>\r\n                  //   table.onSelectAllRows(\r\n                  //     checked,\r\n                  //     tableData.map((row) => row.id)\r\n                  //   )\r\n                  // }\r\n                />\r\n\r\n                <TableBody>\r\n                  {dataFiltered\r\n                    .slice(\r\n                      table.page * table.rowsPerPage,\r\n                      table.page * table.rowsPerPage + table.rowsPerPage\r\n                    )\r\n                    .map((row) => (\r\n                      <CustomerTableRow\r\n                        key={row.id}\r\n                        row={row}\r\n                        selected={table.selected.includes(row.id)}\r\n                        onSelectRow={() => table.onSelectRow(row.id)}\r\n                        onViewRow={() => handleViewRow(row.id)}\r\n                        onEditRow={() => handleEditRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                        handleOpenInquiry={() => console.log(row.id)}\r\n                      />\r\n                    ))}\r\n\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(table.page, table.rowsPerPage, tableData.length)}\r\n                  />\r\n\r\n                  <TableNoData notFound={notFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </Scrollbar>\r\n          </TableContainer>\r\n\r\n          <TablePaginationCustom\r\n            count={dataFiltered.length}\r\n            page={table.page}\r\n            rowsPerPage={table.rowsPerPage}\r\n            onPageChange={table.onChangePage}\r\n            onRowsPerPageChange={table.onChangeRowsPerPage}\r\n            dense={table.dense}\r\n            onChangeDense={table.onChangeDense}\r\n          />\r\n        </Card>\r\n      </Container>\r\n\r\n    \r\n  );\r\n}\r\n\r\nfunction applyFilter({ inputData, comparator, filters }) {\r\n    const { name } = filters;\r\n  \r\n    const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n  \r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n  \r\n    inputData = stabilizedThis.map((el) => el[0]);\r\n  \r\n    if (name) {\r\n      inputData = inputData.filter(\r\n        (invoice) =>\r\n          invoice.customerNameEn.toLowerCase().indexOf(name.toLowerCase()) !== -1 ||\r\n          invoice.customerNameAr.indexOf(name.toLowerCase()) !== -1\r\n          \r\n          // invoice.invoiceTo.name.toLowerCase().indexOf(name.toLowerCase()) !== -1\r\n      );\r\n    }\r\n  \r\n    // if (status !== 'all') {\r\n    //   inputData = inputData.filter((invoice) => invoice.status === status);\r\n    // }\r\n  \r\n    // if (service.length) {\r\n    //   inputData = inputData.filter((invoice) =>\r\n    //     // service.map((serviceName) => serviceName.toLowerCase()).includes(invoice.department)\r\n    //     service.includes('All') || service.includes(invoice.department)\r\n    //   );\r\n    // }\r\n    \r\n    // if (paidStatus.length) {\r\n    //   inputData = inputData.filter((invoice) =>\r\n    //     paidStatus.includes('All') || paidStatus.map((option) => option.toLowerCase()).includes(invoice.paidStatus)\r\n    //   );\r\n    // }\r\n\r\n    // if (!dateError) {\r\n    //   if (startDate && endDate) {\r\n    //     inputData = inputData.filter(\r\n    //       (invoice) =>\r\n    //         fTimestamp(invoice.issueInvoiceDate) >= fTimestamp(startDate) &&\r\n    //         fTimestamp(invoice.issueInvoiceDate) <= fTimestamp(endDate)\r\n    //     );\r\n    //   }\r\n    // }\r\n  \r\n    return inputData;\r\n  }","import PropTypes from 'prop-types';\r\nimport { useLocales } from 'src/locales';\r\n// @mui\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport IconButton from '@mui/material/IconButton';\r\n// hooks\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n// utils\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport { ConfirmDialog } from 'src/components/custom-dialog';\r\nimport CustomPopover, { usePopover } from 'src/components/custom-popover';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomerTableRow({\r\n  row,\r\n  selected,\r\n  onSelectRow,\r\n  onViewRow,\r\n  onEditRow,\r\n  onDeleteRow,\r\n  handleOpenInquiry,\r\n}) {\r\n  const { id, customerCode, customerNameEn, customerNameAr } = row;\r\n\r\n  const { t } = useLocales()\r\n  const Translate = (text) => t(text);\r\n\r\n  const confirm = useBoolean();\r\n\r\n  const popover = usePopover();\r\n\r\n  return (\r\n    <>\r\n      <TableRow hover >\r\n        \r\n        <TableCell >{customerCode}</TableCell>\r\n        \r\n        <TableCell >{customerNameEn}</TableCell>\r\n\r\n        <TableCell >{customerNameAr}</TableCell>\r\n\r\n        <TableCell align=\"right\" sx={{ px: 1 }}>\r\n          <IconButton color={popover.open ? 'inherit' : 'default'} onClick={popover.onOpen}>\r\n            <Iconify icon=\"eva:more-vertical-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n\r\n      </TableRow>\r\n\r\n      <CustomPopover\r\n        open={popover.open}\r\n        onClose={popover.onClose}\r\n        arrow=\"right-top\"\r\n        sx={{ width: 160 }}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:eye-bold\" />\r\n          {Translate(\"edit\")}\r\n        </MenuItem>\r\n\r\n        <Divider sx={{ borderStyle: 'solid' }} />\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            confirm.onTrue();\r\n            popover.onClose();\r\n          }}\r\n          sx={{ color: 'error.main' }}\r\n        >\r\n          <Iconify icon=\"solar:trash-bin-trash-bold\" />\r\n          {Translate(\"delete\")}\r\n        </MenuItem>\r\n      </CustomPopover>\r\n\r\n      <ConfirmDialog\r\n        open={confirm.value}\r\n        onClose={confirm.onFalse}\r\n        title={Translate(\"delete\")}\r\n        content={Translate(\"deleteDialogContent\")}\r\n        action={\r\n          <Button variant=\"contained\" color=\"error\" onClick={() => {\r\n            console.log(\"Delete clicked\");\r\n            onDeleteRow();\r\n            confirm.onFalse()\r\n          }}>\r\n            {Translate(\"delete\")}\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nCustomerTableRow.propTypes = {\r\n  onDeleteRow: PropTypes.func,\r\n  onEditRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n  onViewRow: PropTypes.func,\r\n  handleOpenInquiry: PropTypes.func,\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useCallback } from 'react';\r\nimport { useLocales } from 'src/locales';\r\n// @mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport { usePopover } from 'src/components/custom-popover';\r\n\r\n// ----------------------------------------------------------------------\r\nexport default function CustomerTableToolbar({\r\n  filters,\r\n  onFilters,\r\n  dateError,\r\n  serviceOptions,\r\n  paidStatusOptions,\r\n}) {\r\n  const popover = usePopover();\r\n\r\n  const handleFilterName = useCallback(\r\n    (event) => {\r\n      onFilters('name', event.target.value);\r\n    },\r\n    [onFilters]\r\n  );\r\n\r\n  const { t } = useLocales();\r\n  const Translate = (text) => t(text);\r\n\r\n  return (\r\n    <>\r\n      <Stack\r\n        spacing={2}\r\n        alignItems={{ xs: 'flex-end', md: 'center' }}\r\n        direction={{\r\n          xs: 'column',\r\n          md: 'row',\r\n        }}\r\n        sx={{\r\n          p: 2.5,\r\n          pr: { xs: 2.5, md: 1 },\r\n        }}\r\n      >\r\n      \r\n\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} flexGrow={1} sx={{ width: 1 }}>\r\n          <TextField\r\n            fullWidth\r\n            value={filters.name}\r\n            onChange={handleFilterName}\r\n            placeholder={Translate(\"searchCustomerName\")}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          {/* <IconButton onClick={popover.onOpen}>\r\n            <Iconify icon=\"eva:more-vertical-fill\" />\r\n          </IconButton> */}\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* <CustomPopover\r\n        open={popover.open}\r\n        onClose={popover.onClose}\r\n        arrow=\"right-top\"\r\n        sx={{ width: 140 }}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:printer-minimalistic-bold\" />\r\n          Print\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:import-bold\" />\r\n          Import\r\n        </MenuItem>\r\n\r\n        <MenuItem\r\n          onClick={() => {\r\n            popover.onClose();\r\n          }}\r\n        >\r\n          <Iconify icon=\"solar:export-bold\" />\r\n          Export\r\n        </MenuItem>\r\n      </CustomPopover> */}\r\n    </>\r\n  );\r\n}\r\n\r\nCustomerTableToolbar.propTypes = {\r\n  dateError: PropTypes.bool,\r\n  filters: PropTypes.object,\r\n  onFilters: PropTypes.func,\r\n  serviceOptions: PropTypes.array,\r\n  paidStatusOptions: PropTypes.array,\r\n};\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport  CustomerListView  from 'src/screens/components/customer/all/CustomerListView';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomerListViewMain() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Customers List</title>\r\n      </Helmet>\r\n\r\n      <CustomerListView />\r\n    </>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\n// @mui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n// components\nimport Iconify from 'src/components/iconify';\nimport { shortDateLabel } from 'src/components/custom-date-range-picker';\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceTableFiltersResult({\n  filters,\n  onFilters,\n  //\n  onResetFilters,\n  //\n  results,\n  ...other\n}) {\n  const shortLabel = shortDateLabel(filters.startDate, filters.endDate);\n\n  const handleRemoveService = (inputValue) => {\n    const newValue = filters.service.filter((item) => item !== inputValue);\n    onFilters('service', newValue);\n  };\n\n  const handleRemoveStatus = () => {\n    onFilters('status', 'all');\n  };\n\n  const handleRemoveDate = () => {\n    onFilters('startDate', null);\n    onFilters('endDate', null);\n  };\n\n  return (\n    <Stack spacing={1.5} {...other}>\n      <Box sx={{ typography: 'body2' }}>\n        <strong>{results}</strong>\n        <Box component=\"span\" sx={{ color: 'text.secondary', ml: 0.25 }}>\n          results found\n        </Box>\n      </Box>\n\n      <Stack flexGrow={1} spacing={1} direction=\"row\" flexWrap=\"wrap\" alignItems=\"center\">\n        {!!filters.service.length && (\n          <Block label=\"Service:\">\n            {filters.service.map((item) => (\n              <Chip\n                key={item}\n                label={item}\n                size=\"small\"\n                onDelete={() => handleRemoveService(item)}\n              />\n            ))}\n          </Block>\n        )}\n\n        {filters.status !== 'all' && (\n          <Block label=\"Status:\">\n            <Chip size=\"small\" label={filters.status} onDelete={handleRemoveStatus} />\n          </Block>\n        )}\n\n        {filters.startDate && filters.endDate && (\n          <Block label=\"Date:\">\n            <Chip size=\"small\" label={shortLabel} onDelete={handleRemoveDate} />\n          </Block>\n        )}\n\n        <Button\n          color=\"error\"\n          onClick={onResetFilters}\n          startIcon={<Iconify icon=\"solar:trash-bin-trash-bold\" />}\n        >\n          Clear\n        </Button>\n      </Stack>\n    </Stack>\n  );\n}\n\nInvoiceTableFiltersResult.propTypes = {\n  filters: PropTypes.object,\n  onFilters: PropTypes.func,\n  onResetFilters: PropTypes.func,\n  results: PropTypes.number,\n};\n\n// ----------------------------------------------------------------------\n\nfunction Block({ label, children, sx, ...other }) {\n  return (\n    <Stack\n      component={Paper}\n      variant=\"outlined\"\n      spacing={1}\n      direction=\"row\"\n      sx={{\n        p: 1,\n        borderRadius: 1,\n        overflow: 'hidden',\n        borderStyle: 'dashed',\n        ...sx,\n      }}\n      {...other}\n    >\n      <Box component=\"span\" sx={{ typography: 'subtitle2' }}>\n        {label}\n      </Box>\n\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {children}\n      </Stack>\n    </Stack>\n  );\n}\n\nBlock.propTypes = {\n  children: PropTypes.node,\n  label: PropTypes.string,\n  sx: PropTypes.object,\n};\n"],"names":["ConfirmDialog","_ref","title","content","action","open","onClose","other","_objectWithoutProperties","_excluded","_jsxs","Dialog","_objectSpread","fullWidth","maxWidth","children","_jsx","DialogTitle","sx","pb","DialogContent","typography","DialogActions","Button","variant","color","onClick","baseUrl","getAllCustomers","_getAllCustomers","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","list","wrap","_context","prev","next","fetch","concat","mode","then","result","json","invoices","catch","error","console","log","abrupt","stop","GetAllCustomersWithAll","_GetAllCustomersWithAll","_callee2","_context2","push","_toConsumableArray","getSalesPersonList","_getSalesPersonList","_callee3","_context3","getCustomerById","_x","_getCustomerById","_callee4","id","response","invoice","_context4","sent","ok","status","statusText","t0","deleteCustomer","_x2","_deleteCustomer","_callee5","success","_context5","method","headers","Cache","res","Error","defaultFilters","name","service","paidStatus","startDate","endDate","dataGridData","getAllInvoices","CustomerListView","settings","useSettingsContext","router","useRouter","table","useTable","defaultOrderBy","navigate","useNavigate","t","useLocales","Translate","text","_useState","useState","_useState2","_slicedToArray","tableData","setTableData","_useState3","_useState4","filters","setFilters","_useState5","_useState6","refresh","setRefresh","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","useEffect","fetchData","TABLE_HEAD","label","dateError","getTime","dataFiltered","applyFilter","inputData","comparator","getComparator","order","orderBy","denseHeight","slice","page","rowsPerPage","dense","canReset","length","notFound","handleFilters","useCallback","value","onResetPage","prevState","_defineProperty","handleEditRow","paths","customers","edit","handleViewRow","dashboard","details","handleResetFilters","Container","themeStretch","CustomBreadcrumbs","heading","links","href","root","Stack","direction","divider","Divider","orientation","flexItem","borderStyle","py","create","startIcon","Iconify","icon","mb","xs","md","Card","CustomerTableToolbar","onFilters","serviceOptions","_departments","map","option","paidStatusOptions","_statusList","InvoiceTableFiltersResult","onResetFilters","results","p","pt","TableContainer","position","overflow","Scrollbar","Table","size","minWidth","TableHeadCustom","headLabel","rowCount","numSelected","selected","onSort","TableBody","row","CustomerTableRow","includes","onSelectRow","onViewRow","onEditRow","onDeleteRow","deleteData","_ref2","t1","handleDeleteRow","handleOpenInquiry","TableEmptyRows","height","emptyRows","TableNoData","TablePaginationCustom","count","onPageChange","onChangePage","onRowsPerPageChange","onChangeRowsPerPage","onChangeDense","_ref3","stabilizedThis","el","index","sort","a","b","filter","customerNameEn","toLowerCase","indexOf","customerNameAr","customerCode","confirm","useBoolean","popover","usePopover","_Fragment","TableRow","hover","TableCell","align","px","IconButton","onOpen","CustomPopover","arrow","width","MenuItem","onTrue","onFalse","handleFilterName","event","target","spacing","alignItems","pr","flexGrow","TextField","onChange","placeholder","InputProps","startAdornment","InputAdornment","CustomerListViewMain","Helmet","shortLabel","shortDateLabel","Box","component","ml","flexWrap","Block","item","Chip","onDelete","inputValue","newValue","handleRemoveService","_excluded2","Paper","borderRadius"],"sourceRoot":""}