{"version":3,"file":"static/js/1025.42b0625e.chunk.js","mappings":"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","sources":["screens/components/invoice/create/invoice-new-edit-address.js","screens/components/invoice/create/invoice-new-edit-status-date.js","screens/components/invoice/create/invoice-new-edit-form.js","screens/components/invoice/create/InvoiceCreateView.js","screens/invoice/InvoiceCreatePage.js","../node_modules/lodash/_baseSum.js","../node_modules/lodash/sum.js"],"sourcesContent":["import { useFormContext } from 'react-hook-form';\n// @mui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\nimport { useResponsive } from 'src/hooks/use-responsive';\n// _mock\nimport { _addressBooks } from 'src/_mock';\n// components\nimport Iconify from 'src/components/iconify';\n// lists\nimport { getAllCustomers, getSalesPersonList } from 'src/data-access/customers';\n//\nimport  AddressListDialog  from '../../AddressListDialog';\nimport  AddressListDialogSales  from '../../AddressListDialogSales';\n\n\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceNewEditAddress() {\n  \n  const {\n    watch,\n    setValue,\n    formState: { errors },\n  } = useFormContext();\n\n  const customers = getAllCustomers();\n  const salesPeople = getSalesPersonList();\n\n  const selectedCustomer = {};\n  const selectedSalesPerson = {};\n\n  const updateCustomer = (customer) => {\n    console.log(customer)\n    selectedCustomer.customerCode = customer.customerCode\n    selectedCustomer.customerNameAr = customer.customerNameAr\n    selectedCustomer.customerNameEn = customer.customerNameEn\n    console.log('selectedCustomer', customer)\n  }\n\n  const updateSalesPerson = (person) => {\n    salesPeople.username = person.salesPeople\n  }\n\n\n  const mdUp = useResponsive('up', 'md');\n\n  const values = watch();\n\n  const { customerId, customerCode, salesPerson, customerObj, salesPersonObj } = values;\n\n  // setValue('salesPerson', selectedSalesPerson.username)\n  // setValue('customerId', selectedCustomer.id)\n  // setValue('customerCode', selectedCustomer.customerCode)\n\n  \n  console.log('values', values)\n\n\n\n  const from = useBoolean();\n\n  const to = useBoolean();\n\n  return (\n    <>\n      <Stack\n        spacing={{ xs: 3, md: 5 }}\n        direction={{ xs: 'column', md: 'row' }}\n        divider={\n          <Divider\n            flexItem\n            orientation={mdUp ? 'vertical' : 'horizontal'}\n            sx={{ borderStyle: 'dashed' }}\n          />\n        }\n        sx={{ p: 3 }}\n      >\n        <Stack sx={{ width: 1 }}>\n          <Stack direction=\"row\" alignItems=\"center\" sx={{ mb: 1 }}>\n            <Typography variant=\"h6\" sx={{ color: 'text.disabled', flexGrow: 1 }}>\n              Customer:\n            </Typography>\n\n            <IconButton onClick={from.onTrue}>\n              <Iconify icon=\"solar:pen-bold\" />\n            </IconButton>\n          </Stack>\n\n          <Stack spacing={1}>\n            <Typography variant=\"subtitle2\">Code: {customerObj?.customerCode}</Typography>\n            <Typography variant=\"body2\">Name English: {customerObj?.customerNameEn}</Typography>\n            <Typography variant=\"body2\">Name Arabic:  {customerObj?.customerNameAr}</Typography> \n          </Stack>\n        </Stack>\n\n        <Stack sx={{ width: 1 }}>\n          <Stack direction=\"row\" alignItems=\"center\" sx={{ mb: 1 }}>\n            <Typography variant=\"h6\" sx={{ color: 'text.disabled', flexGrow: 1 }}>\n              Sales Person:\n            </Typography>\n\n            <IconButton onClick={to.onTrue}>\n              <Iconify icon={salesPeople ? 'solar:pen-bold' : 'mingcute:add-line'} />\n            </IconButton>\n          </Stack>\n\n          {salesPeople ? (\n            <Stack spacing={1}>\n              <Typography variant=\"subtitle2\">{salesPersonObj?.username}</Typography>\n              {/* <Typography variant=\"body2\">{invoiceTo.fullAddress}</Typography>\n              <Typography variant=\"body2\"> {invoiceTo.phoneNumber}</Typography> */}\n            </Stack>\n          ) : (\n            <Typography typography=\"caption\" sx={{ color: 'error.main' }}>\n              {errors.salesPeople?.message}\n            </Typography>\n          )}\n        </Stack>\n      </Stack>\n\n      <AddressListDialog\n        title=\"Customers\"\n        open={from.value}\n        onClose={from.onFalse}\n        selected={(selectedId) => getAllCustomers?.id === selectedId}\n        onSelect={(customer) =>  {\n          setValue('customerObj', customer)\n          setValue('customerId', customer.id)\n          setValue('customerCode', customer.customerCode)\n        } }\n        list={customers}\n        // action={\n        //   <Button\n        //     size=\"small\"\n        //     startIcon={<Iconify icon=\"mingcute:add-line\" />}\n        //     sx={{ alignSelf: 'flex-end' }}\n        //   >\n        //     New\n        //   </Button>\n        // }\n      />\n\n       <AddressListDialogSales\n        title=\"Sales\"\n        open={to.value}\n        onClose={to.onFalse}\n        selected={(selectedId) => salesPerson?.id === selectedId}\n        onSelect={(person) => {\n          setValue('salesPersonObj', person)\n          setValue('salesPerson', person.username)\n        }}\n        list={salesPeople}\n        // action={\n        //   <Button\n        //     size=\"small\"\n        //     startIcon={<Iconify icon=\"mingcute:add-line\" />}\n        //     sx={{ alignSelf: 'flex-end' }}\n        //   >\n        //     New\n        //   </Button>\n        // }\n      /> \n    </>\n  );\n}\n","import { useFormContext, Controller } from 'react-hook-form';\n// @mui\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\n// components\nimport { RHFSelect, RHFTextField } from 'src/components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceNewEditStatusDate() {\n  const { control, watch } = useFormContext();\n\n  const values = watch();\n\n  return (\n    <>\n      <Stack\n        spacing={2}\n        direction={{ xs: 'column', sm: 'row' }}\n        sx={{ p: 3, bgcolor: 'background.neutral' }}\n      >\n        <RHFTextField\n          name=\"invoiceNumber\"\n          label=\"Invoice number\"\n          value={values.invoiceNumber}\n        />\n        \n        <Controller\n          name=\"createDate\"\n          control={control}\n          render={({ field, fieldState: { error } }) => (\n            <DatePicker\n              label=\"Date create\"\n              value={field.value}\n              onChange={(newValue) => {\n                field.onChange(newValue);\n              }}\n              slotProps={{\n                textField: {\n                  fullWidth: true,\n                  error: !!error,\n                  helperText: error?.message,\n                },\n              }}\n            />\n          )}\n        />\n\n        <Controller\n          name=\"deliveryDate\"\n          control={control}\n          render={({ field, fieldState: { error } }) => (\n            <DatePicker\n              label=\"Deliver date\"\n              value={field.value}\n              onChange={(newValue) => {\n                field.onChange(newValue);\n              }}\n              slotProps={{\n                textField: {\n                  fullWidth: true,\n                  error: !!error,\n                  helperText: error?.message,\n                },\n              }}\n            />\n          )}\n        />\n\n        <RHFTextField\n          name=\"invoiceAmount\"\n          label=\"Ammount\"\n          value={values.invoiceAmount}\n          type=\"number\"\n        />\n\n\n        \n        \n        \n      </Stack>\n\n      <Stack\n      spacing={2}\n      direction={{ xs: 'column', sm: 'row' }}\n      sx={{ p: 3, bgcolor: 'background.neutral' }}\n      >\n        <RHFTextField\n          name=\"currency\"\n          label=\"Currency\"\n          value={values.currency}\n        />\n\n        <RHFTextField\n          name=\"region\"\n          label=\"Region\"\n          value={values.region}\n        />\n\n        <RHFTextField\n          name=\"customerPO\"\n          label=\"PO Number\"\n          value={values.customerPO}\n        />\n\n        <RHFTextField\n          name=\"poValue\"\n          label=\"PO Value\"\n          value={values.poValue}\n          type=\"number\"\n        />\n\n        <RHFTextField\n          name=\"contractNo\"\n          label=\"Contract\"\n          value={values.contractNo}\n        />\n      </Stack>\n\n    </>\n\n    // invoiceNumber: currentInvoice?.invoiceNumber,\n    // createDate: currentInvoice?.createDate || new Date(),\n    // invoiceAmount: currentInvoice?.invoiceAmount,\n    // currency: currentInvoice?.currency,\n    // customer: currentInvoice?.customer || customers[0],\n    // region: currentInvoice?.region,\n    // customerPO: currentInvoice?.customerPO ,\n    // poValue: currentInvoice?.poValue,\n    // contractNo: currentInvoice?.contractNo,\n    // salesPerson: currentInvoice?.salesPerson || salesPeople[0],\n\n    \n  );\n}\n","import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\nimport * as Yup from 'yup';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Card from '@mui/material/Card';\nimport Stack from '@mui/material/Stack';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { useRouter } from 'src/routes/hooks';\n// _mock\nimport { _addressBooks } from 'src/_mock';\n\n\n\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// components\nimport FormProvider from 'src/components/hook-form';\n\n// lists\nimport { getAllCustomers, getSalesPersonList } from 'src/data-access/customers';\n//\nimport InvoiceNewEditDetails from './invoice-new-edit-details';\nimport InvoiceNewEditAddress from './invoice-new-edit-address';\nimport InvoiceNewEditStatusDate from './invoice-new-edit-status-date';\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceNewEditForm({ currentInvoice }) {\n  const router = useRouter();\n\n  const loadingSave = useBoolean();\n\n  const loadingSend = useBoolean();\n\n  const NewInvoiceSchema = Yup.object().shape({\n    customerId: Yup.mixed().nullable().required('Customer is required'),\n    createDate: Yup.mixed().nullable().required('Create date is required'),\n    deliveryDate: Yup.mixed().nullable().required('Delivery date is required'),\n    invoiceNumber: Yup.string().required('Invoice number is required'),\n    invoiceAmount: Yup.date().required('Invoice amount is required'),\n    currency: Yup.string().required('Currency is required'),\n    customerCode: Yup.string().required('Customer code is required'),\n    region: Yup.string().required('Region is required'),\n    customerPO: Yup.string().required('Customer PO number is required'),\n    poValue: Yup.number().required('PO value is required'),\n    contractNo: Yup.string().required('contractNo is required'),\n    salesPerson: Yup.string().required('salesPerson is required'),\n\n  });\n\n  const defaultValues = useMemo(\n    () => ({\n      customerObj: {},\n      salesPersonObj: {},\n      invoiceNumber: currentInvoice?.invoiceNumber,\n      createDate: currentInvoice?.createDate || new Date(),\n      invoiceAmount: currentInvoice?.invoiceAmount,\n      currency: currentInvoice?.currency,\n      customerId: currentInvoice?.customerId,\n      customerCode: currentInvoice?.customerCode,\n      region: currentInvoice?.region,\n      customerPO: currentInvoice?.customerPO ,\n      poValue: currentInvoice?.poValue,\n      contractNo: currentInvoice?.contractNo,\n      salesPerson: currentInvoice?.salesPerson,\n      deliveryDate: currentInvoice?.deliveryDate || new Date(),\n      \n    }),\n    [currentInvoice]\n  );\n\n  const methods = useForm({\n    resolver: yupResolver(NewInvoiceSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  \n\n  // const onSubmit: SubmitHandler<defaultValues> = (data) => console.log(data);\n\n  const handleSaveAsDraft = handleSubmit(async (data) => {\n    console.info('Draft DATA', JSON.stringify(data));\n    loadingSave.onTrue();\n\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      reset();\n      loadingSave.onFalse();\n\n\n\n      router.push(paths.dashboard.invoice.root);\n      console.info('DATA', JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.error(error);\n      loadingSave.onFalse();\n    }\n  });\n\n  const handleCreateAndSend = handleSubmit(async (data) => {\n    loadingSend.onTrue(); \n    \n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      \n      const {invoiceNumber, createDate, invoiceAmount, currency, customerCode, region, customerPO, poValue, contractNo, salesPerson, deliveryDate} = watch()\n      const body = {\n        invoiceNo: invoiceNumber,\n        issueInvoiceDate: createDate,\n        invoiceAmount,\n        currency,\n        customerCode,\n        region,\n        customerPO,\n        poValue,\n        contractNo,\n        salesTakerUsername: salesPerson,\n        deliveryDate\n      }\n\n\n      reset();\n      loadingSend.onFalse();\n\n      let redirectUrl = paths.dashboard.invoice.root\n      // Send create invoice request\n      \n      console.log(body)\n      fetch('https://invoicecollectionsystemapi.azurewebsites.net/api/Invoices', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application.json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body),\n        Cache: 'default'\n      })\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        \n      })\n      .catch(error => {\n        console.log(error)\n        redirectUrl = ''\n      })\n\n      if(redirectUrl) {\n        router.replace(redirectUrl);\n      }\n\n      \n      // console.info('DATA', JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.error('Error:', error);\n      loadingSend.onFalse();\n    }\n  });\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleCreateAndSend} >\n      <Card>\n        <InvoiceNewEditAddress />\n\n        <InvoiceNewEditStatusDate />\n\n        {/* <InvoiceNewEditDetails /> */}\n      </Card>\n\n      <Stack justifyContent=\"flex-end\" direction=\"row\" spacing={2} sx={{ mt: 3 }}>\n        {/* <LoadingButton\n          color=\"inherit\"\n          size=\"large\"\n          variant=\"outlined\"\n          loading={loadingSave.value && isSubmitting}\n          onClick={handleSaveAsDraft}\n        >\n          Save as Draft\n        </LoadingButton> */}\n\n        <LoadingButton\n          size=\"large\"\n          variant=\"contained\"\n          loading={loadingSend.value && isSubmitting}\n          type='submit'\n          // onClick={ handleSubmit(handleCreateAndSend)} \n        >\n          {currentInvoice ? 'Update' : 'Create'} & Send\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n\nInvoiceNewEditForm.propTypes = {\n  currentInvoice: PropTypes.object,\n};\n","// @mui\r\nimport Container from '@mui/material/Container';\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\n// components\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\r\n//\r\nimport InvoiceNewEditForm from './invoice-new-edit-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function InvoiceCreateView() {\r\n  const settings = useSettingsContext();\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'lg'}>\r\n      <CustomBreadcrumbs\r\n        heading=\"Create a new invoice\"\r\n        links={[\r\n          {\r\n            name: 'Dashboard',\r\n            href: paths.dashboard.root,\r\n          },\r\n          {\r\n            name: 'Invoice',\r\n            href: paths.dashboard.invoice.root,\r\n          },\r\n          {\r\n            name: 'New Invoice',\r\n          },\r\n        ]}\r\n        sx={{\r\n          mb: { xs: 3, md: 5 },\r\n        }}\r\n      />\r\n\r\n      <InvoiceNewEditForm />\r\n    </Container>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport  InvoiceCreateView  from 'src/screens/components/invoice/create/InvoiceCreateView';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function InvoiceCreatePage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Dashboard: Create a new invoice</title>\r\n      </Helmet>\r\n\r\n      <InvoiceCreateView />\r\n    </>\r\n  );\r\n}\r\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n"],"names":["InvoiceNewEditAddress","_errors$salesPeople","_useFormContext","useFormContext","watch","setValue","errors","formState","customers","getAllCustomers","salesPeople","getSalesPersonList","mdUp","useResponsive","values","salesPerson","customerId","customerCode","customerObj","salesPersonObj","console","log","from","useBoolean","to","_jsxs","_Fragment","children","Stack","spacing","xs","md","direction","divider","_jsx","Divider","flexItem","orientation","sx","borderStyle","p","width","alignItems","mb","Typography","variant","color","flexGrow","IconButton","onClick","onTrue","Iconify","icon","customerNameEn","customerNameAr","username","typography","message","AddressListDialog","title","open","value","onClose","onFalse","selected","selectedId","id","onSelect","customer","list","AddressListDialogSales","person","InvoiceNewEditStatusDate","control","sm","bgcolor","RHFTextField","name","label","invoiceNumber","Controller","render","_ref","field","error","fieldState","DatePicker","onChange","newValue","slotProps","textField","fullWidth","helperText","_ref2","invoiceAmount","type","currency","region","customerPO","poValue","contractNo","InvoiceNewEditForm","currentInvoice","router","useRouter","loadingSave","loadingSend","NewInvoiceSchema","Yup","shape","nullable","required","createDate","deliveryDate","defaultValues","useMemo","Date","methods","useForm","resolver","yupResolver","reset","handleSubmit","isSubmitting","handleCreateAndSend","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","info","JSON","stringify","Promise","resolve","setTimeout","push","paths","dashboard","invoice","root","t0","stop","_x","apply","arguments","_ref3","_callee2","_watch","body","redirectUrl","_context2","invoiceNo","issueInvoiceDate","salesTakerUsername","fetch","method","headers","Cache","then","res","json","catch","replace","_x2","FormProvider","onSubmit","Card","justifyContent","mt","LoadingButton","size","loading","InvoiceCreateView","settings","useSettingsContext","Container","maxWidth","themeStretch","CustomBreadcrumbs","heading","links","href","InvoiceCreatePage","Helmet","module","exports","array","iteratee","result","index","length","current","undefined","baseSum","require","identity"],"sourceRoot":""}