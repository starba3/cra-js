{"version":3,"file":"static/js/880.27544eba.chunk.js","mappings":"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","sources":["data-access/customers.js","data-access/invoice.js","screens/components/reports/invoiceForCustomers/customersListDialog.js","screens/components/reports/invoiceForCustomers/InvoiceTableToolbar.js","screens/components/reports/invoiceForCustomers/tableRow.js","screens/components/reports/invoiceForCustomers/invoiceForCustomersView.js","screens/reports/invoiceForCustomers.js"],"sourcesContent":["const baseUrl = 'https://invoicecollectionsystemapi.azurewebsites.net';\r\n\r\nexport async function getAllCustomers() {\r\n    let list = [];\r\n    await fetch(`${baseUrl}/customer`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n        list = invoices;\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n\r\n}\r\n\r\nexport async function GetAllCustomersWithAll() {\r\n\r\n    const list = [{\r\n        \"id\": \"0\",\r\n        \"customerCode\": \"All\",\r\n        \"customerNameEn\": \"All\",\r\n        \"customerNameAr\": \"All\",\r\n    }];\r\n    await fetch(`${baseUrl}/customer`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n\r\n        // Add all invoices to the list\r\n        list.push(...invoices);\r\n    })\r\n    .catch(error => console.log())\r\n    console.log('List: '. list);\r\n    return list\r\n\r\n}\r\n\r\nexport async function getSalesPersonList() {\r\n    let list = []\r\n    await fetch(`${baseUrl}/api/User/UsersNameByRole/sales`, {\r\n        mode:'cors'\r\n    })\r\n    .then(result => result.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n\r\n}\r\n\r\nexport async  function getCustomerById(id) {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/Customer/${id}`, {\r\n            mode: 'cors'\r\n        });\r\n\r\n        if (response.ok) {\r\n            const invoice = await response.json();\r\n            return invoice;\r\n        } \r\n            // Handle non-successful response here if needed.\r\n            console.error(`Failed to fetch invoice: ${response.status} - ${response.statusText}`);\r\n        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return {}; // Return an empty object by default or handle errors as needed.\r\n    \r\n}\r\n\r\nexport async function deleteCustomer(id) {\r\n    let success = true;\r\n    await fetch(`${baseUrl}/Customer/${id}/Delete`, {\r\n        mode:'cors',\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        Cache: 'default'\r\n    })\r\n    .then(res => {\r\n        // Check if the status code is 200 or 204\r\n        if (res.ok) {\r\n          // Check if the status code is 200 or 204\r\n          if (res.status === 204) {\r\n            return null; // Handle 204 No Content\r\n          }  if (res.status === 200) {\r\n            return res.json(); // Parse JSON for other successful responses\r\n          } \r\n\r\n          throw new Error(`Unexpected status code: ${res.status}`);\r\n          \r\n        } \r\n\r\n        throw new Error('Network response was not ok');\r\n      })\r\n    .then(invoices => {\r\n        console.log(\"Deleted successfuly\")\r\n    })\r\n    .catch(error => {\r\n        console.log(error) \r\n        success = false;\r\n    })\r\n\r\n    return success;\r\n}","\r\nimport { result } from \"lodash\";\r\nimport { paths } from \"src/routes/paths\"\r\n\r\nconst baseUrl = 'https://invoicecollectionsystemapi.azurewebsites.net';\r\n\r\n\r\nexport async function getAllInvoices() {\r\n    let list = []\r\n    await fetch(`${baseUrl}/api/invoices`, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n}\r\n\r\nexport async function getInvoicesByDepartment(id) {\r\n    let list = []\r\n    await fetch(`${baseUrl}/api/Invoices/Department/${id}`, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n}\r\n\r\nexport async function getInvoicesBySalesConfirmation(confirmStatus) {\r\n    let list = []\r\n    let url = '';\r\n    if(confirmStatus) {\r\n        url = `${baseUrl}/api/Invoices/GetInvoicesBySalesConfirmation?salesConfirm=${confirmStatus}`;\r\n    }\r\n    else {\r\n        url = `${baseUrl}/api/Invoices/NotConfirmedBySales`;\r\n    }\r\n    \r\n    await fetch(url, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list\r\n}\r\n\r\nexport async  function getInvoicesById(id) {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/api/invoices/${id}`, {\r\n            mode: 'cors'\r\n        });\r\n\r\n        if (response.ok) {\r\n            const invoice = await response.json();\r\n            return invoice;\r\n        } \r\n            // Handle non-successful response here if needed.\r\n            console.error(`Failed to fetch invoice: ${response.status} - ${response.statusText}`);\r\n        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return {}; // Return an empty object by default or handle errors as needed.\r\n    \r\n}\r\n\r\nexport function getInvoiceEditUrl(departmentId, invoiceId) {\r\n\r\n    let url = ''\r\n    switch (departmentId) {\r\n        case -1:\r\n        case 0:\r\n            url = `${baseUrl}/api/Invoices/${invoiceId}/Edit/Operation`\r\n            break;\r\n        case 1:\r\n            url = `${baseUrl}/api/Invoices/${invoiceId}/Edit/installation`\r\n            break;\r\n        case 2:\r\n            url = `${baseUrl}/api/Invoices/${invoiceId}/Edit/Sales`\r\n            break;\r\n        case 3:\r\n            url = `${baseUrl}/api/Invoices/${invoiceId}/Edit/Collection`\r\n            break;   \r\n        case 4:\r\n            url = `${baseUrl}/api/Invoices/${invoiceId}/Edit/TenderAndContracts`\r\n            break;     \r\n        default:\r\n            break;\r\n    }\r\n\r\n    return url; // Return an empty object by default or handle errors as needed.\r\n    \r\n}\r\n\r\nexport function getInvoiceRedirectUrl(departmentId) {\r\n\r\n    let url = ''\r\n    switch (departmentId) {\r\n        case -1:\r\n        case 0:\r\n            url = paths.departments.operation.list;\r\n            break;\r\n        case 1:\r\n            url = paths.departments.installation.list;\r\n            break;\r\n        case 2:\r\n            url = paths.departments.sales.list;\r\n            break;\r\n        case 3:\r\n            url = paths.departments.collection.list;\r\n            break;   \r\n        case 4:\r\n            url = paths.departments.tenderAndConract.list;\r\n            break;     \r\n        default:\r\n            break;\r\n    }\r\n\r\n    return url; // Return an empty object by default or handle errors as needed.\r\n    \r\n}\r\n\r\nexport function getInvoiceImportUrl() {\r\n\r\n    const url = `${baseUrl}/api/ExcelImport/import-invoices`\r\n    return url; \r\n    \r\n}\r\n\r\nexport function getAddAttachmentUrl(id) {\r\n\r\n    const url = `${baseUrl}/api/Attachments/${id}`\r\n    return url; \r\n    \r\n}\r\n\r\nexport async function getCollectionData() {\r\n    let list = [];\r\n    await fetch(`${baseUrl}/api/CollectionData`, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        list = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return list;\r\n}\r\n\r\nexport async function getInvoiceInquiryData(id) {\r\n    let data = {};\r\n    console.log(`${baseUrl}/api/Invoices/${id}/Inquiry`);\r\n    await fetch(`${baseUrl}/api/Invoices/${id}/Inquiry`, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        data = invoices\r\n    })\r\n    .catch(error => console.log())\r\n\r\n    return data;\r\n}\r\n\r\nexport async function getInvoiceForCustomers(customers) {\r\n    let list = [];\r\n\r\n    if(!customers)\r\n        return list;\r\n\r\n    const queryData = customers.reduce((acc, customer) => `${acc}customerIds=${customer}&`, '');\r\n    // queryData = queryData.slice(-1);\r\n\r\n    await fetch(`${baseUrl}/api/Invoices/GetInvoicesForCustomers?${queryData}`, {\r\n        mode:'cors'\r\n    })\r\n    .then(response => response.json())\r\n    .then(invoices => {\r\n        list = invoices;\r\n    })\r\n    .catch(error => {\r\n        console.log(error);\r\n        list = [];\r\n        \r\n    })\r\n\r\n    console.log('Result: ', list)\r\n   \r\n\r\n    return list;\r\n}\r\n\r\nexport async function deleteInvoice(id) {\r\n    let success = true;\r\n    await fetch(`${baseUrl}/api/Invoices/${id}/Delete`, {\r\n        mode:'cors',\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        Cache: 'default'\r\n    })\r\n    .then(res => {\r\n        // Check if the status code is 200 or 204\r\n        if (res.ok) {\r\n          // Check if the status code is 200 or 204\r\n          if (res.status === 204) {\r\n            return null; // Handle 204 No Content\r\n          }  if (res.status === 200) {\r\n            return res.json(); // Parse JSON for other successful responses\r\n          } \r\n\r\n          throw new Error(`Unexpected status code: ${res.status}`);\r\n          \r\n        } \r\n\r\n        throw new Error('Network response was not ok');\r\n      })\r\n    .then(invoices => {\r\n        console.log(\"Deleted successfuly\")\r\n    })\r\n    .catch(error => {\r\n        console.log(error) \r\n        success = false;\r\n    })\r\n\r\n    return success;\r\n}","import PropTypes from 'prop-types';\r\nimport { useState, useCallback } from 'react';\r\nimport { useLocales } from 'src/locales';\r\n// @mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport ListItemButton, { listItemButtonClasses } from '@mui/material/ListItemButton';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport SearchNotFound from 'src/components/search-not-found';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomersListDialog({\r\n  title = 'Address Book',\r\n  list,\r\n  action,\r\n  //\r\n  open,\r\n  onClose,\r\n  //\r\n  selected,\r\n  onSelect,\r\n}) {\r\n  \r\n  const [searchAddress, setSearchAddress] = useState('');\r\n  const [selectedCustomer, setSelectedCustomers] = useState(['']);  \r\n  const dataFiltered = applyFilter({\r\n    inputData: list,\r\n    query: searchAddress,\r\n  });\r\n\r\n  const { t } = useLocales()\r\n  const Translate = (text) => t(text);\r\n\r\n  const notFound = !dataFiltered.length && !!searchAddress;\r\n\r\n  const handleSearchAddress = useCallback((event) => {\r\n    setSearchAddress(event.target.value);\r\n  }, []);\r\n\r\n  const handleSelectAddress = useCallback(\r\n    (address) => {\r\n      onSelect(address);\r\n      setSearchAddress('');\r\n      onClose();\r\n    },\r\n    [ onClose, onSelect]\r\n  );\r\n\r\n  const renderList = (\r\n    <Stack\r\n      spacing={0.5}\r\n      sx={{\r\n        p: 0.5,\r\n        maxHeight: 80 * 8,\r\n        overflowX: 'hidden',\r\n      }}\r\n    >\r\n      {dataFiltered.map((address, index) => (\r\n        <Stack\r\n         \r\n          key={index}\r\n          spacing={0.5}\r\n          component={ListItemButton}\r\n          selected={selected(`${address.id}`)}\r\n          onClick={() => handleSelectAddress(address)}\r\n          sx={{\r\n            py: 1,\r\n            px: 1.5,\r\n            borderRadius: 1,\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            [`&.${listItemButtonClasses.selected}`]: {\r\n              bgcolor: 'action.selected',\r\n              '&:hover': {\r\n                bgcolor: 'action.selected',\r\n              },\r\n            },\r\n          }}\r\n        >\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Typography variant=\"subtitle2\">{Translate(\"code\")}: {address.customerCode}</Typography>\r\n\r\n            {/* {address.primary && <Label color=\"info\">Default</Label>} */}\r\n          </Stack>\r\n\r\n          {/* {address.company && (\r\n            <Box sx={{ color: 'primary.main', typography: 'caption' }}>{address.company}</Box>\r\n          )} */}\r\n\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            {Translate(\"nameEnglish\")}: {address.customerNameEn}\r\n          </Typography>\r\n\r\n          \r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            {Translate(\"nameArabic\")}: {address.customerNameAr}\r\n          </Typography>\r\n          \r\n        </Stack>\r\n      ))}\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={onClose}>\r\n      <Stack\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        sx={{ p: 3, pr: 1.5 }}\r\n      >\r\n        <Typography variant=\"h6\"> {title} </Typography>\r\n\r\n        \r\n      </Stack>\r\n\r\n      <Stack sx={{ p: 2, pt: 0 }}>\r\n        <TextField\r\n          value={searchAddress}\r\n          onChange={handleSearchAddress}\r\n          placeholder={Translate(\"searchCustomer\")}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Stack>\r\n\r\n      {notFound ? (\r\n        <SearchNotFound query={searchAddress} sx={{ px: 3, pt: 5, pb: 10 }} />\r\n      ) : (\r\n        renderList\r\n      )}\r\n      \r\n      {action && action}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nCustomersListDialog.propTypes = {\r\n  action: PropTypes.node,\r\n  list: PropTypes.array,\r\n  onClose: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  open: PropTypes.bool,\r\n  selected: PropTypes.func,\r\n  title: PropTypes.string,\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({ inputData, query }) {\r\n  if (query) {\r\n    return inputData.filter(\r\n      (address) =>\r\n        address.customerCode.toLowerCase().indexOf(query.toLowerCase()) !== -1 ||\r\n        address.customerNameEn.toLowerCase().indexOf(query.toLowerCase()) !== -1 ||\r\n        address.customerNameAr.toLowerCase().indexOf(query.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { useLocales } from 'src/locales';\r\n\r\n// @mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Select from '@mui/material/Select';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Button from '@mui/material/Button';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function InvoiceTableToolbar({\r\n  onChange,\r\n  customers,\r\n  handleOpen,\r\n  selectedCustomers,\r\n}) {\r\n\r\n  const { t } = useLocales()\r\n  const Translate = (text) => t(text);\r\n\r\n  return (\r\n    <Stack\r\n      spacing={2}\r\n      alignItems={{ xs: 'flex-end', md: 'center' }}\r\n      justifyContent=\"flex-end\"\r\n      direction={{\r\n        xs: 'column',\r\n        md: 'row',\r\n      }}\r\n      sx={{\r\n        p: 2.5,\r\n        pr: { xs: 2.5, md: 1 },\r\n      }}\r\n    >\r\n\r\n\r\n    <FormControl\r\n      sx={{\r\n        flexShrink: 0,\r\n        width: { xs: 1, md: 180 },\r\n      }}\r\n    >\r\n      <InputLabel>Customers List</InputLabel>\r\n\r\n        <Select\r\n          multiple\r\n          value={selectedCustomers}  // Ensure that the initial value is set correctly\r\n          onChange={(event) => {\r\n            console.log(event.target.value);\r\n            // setSelectedValue(event.target.value);\r\n            onChange(event.target.value);\r\n          }}  // Use event.target.value to get the selected value\r\n          input={<OutlinedInput label=\"Customers List\" />}\r\n          renderValue={(selected) => selected}\r\n          sx={{ textTransform: 'capitalize' }}\r\n        >\r\n          {customers.map((option, index) => (\r\n            <MenuItem key={index} value={option.id} selected>\r\n              {/* Use Typography inside MenuItem */}\r\n              <Checkbox disableRipple size=\"small\" checked={selectedCustomers.includes(option.id)} />\r\n              {/* <Typography> */}\r\n                {index === 0 ? Translate(\"all\") : option.customerNameAr}\r\n              {/* </Typography> */}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n    </FormControl>\r\n\r\n      {/* <Button >\r\n        <Iconify icon=\"mdi:search\" />\r\n      </Button> */}\r\n\r\n  </Stack>\r\n  );\r\n}\r\n\r\nInvoiceTableToolbar.propTypes = {\r\n  onChange: PropTypes.func,\r\n  handleOpen: PropTypes.func,\r\n  customers: PropTypes.array.isRequired,\r\n  selectedCustomers: PropTypes.array\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { format } from 'date-fns';\r\n// @mui\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Typography from '@mui/material/Typography';\r\n\r\n\r\n\r\n// hooks\r\n// utils\r\n// components\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function TableRowNew({\r\n  row,\r\n  selected,\r\n  isPercentage,\r\n}) {\r\n  const { id, invoiceNo, issueInvoiceDate, invoiceAmount, daysToCollected, customerNameEn, paidStatus, department } = row;\r\n\r\n\r\n\r\n  return (\r\n    <TableRow hover selected={selected}>\r\n\r\n        <TableCell sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <Avatar alt={customerNameEn} sx={{ mr: 2 }}>\r\n            {customerNameEn.charAt(0).toUpperCase()}\r\n          </Avatar>\r\n\r\n          <ListItemText\r\n            disableTypography\r\n            primary={\r\n              <Typography variant=\"body2\" noWrap>\r\n                {customerNameEn}\r\n              </Typography>\r\n            }\r\n            // secondary={\r\n            //   <Link\r\n            //     noWrap\r\n            //     variant=\"body2\"\r\n            //     onClick={onViewRow}\r\n            //     sx={{ color: 'text.disabled', cursor: 'pointer' }}\r\n            //   >\r\n            //     {invoiceNo}\r\n            //   </Link>\r\n            // }\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell>\r\n          <ListItemText\r\n            primary={format(new Date(issueInvoiceDate), 'dd MMM yyyy')}\r\n            secondary={format(new Date(issueInvoiceDate), 'p')}\r\n            primaryTypographyProps={{ typography: 'body2', noWrap: true }}\r\n            secondaryTypographyProps={{\r\n              mt: 0.5,\r\n              component: 'span',\r\n              typography: 'caption',\r\n            }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell >{daysToCollected}</TableCell>\r\n        \r\n        <TableCell >${invoiceAmount}</TableCell>\r\n\r\n        <TableCell align=\"center\" >{paidStatus}</TableCell>\r\n\r\n        <TableCell align=\"center\" >{department}</TableCell>\r\n        {/* <TableCell>{fCurrency(department)}</TableCell> */}\r\n\r\n        \r\n      </TableRow>\r\n  );\r\n}\r\n\r\nTableRowNew.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  isPercentage: PropTypes.bool,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocales } from 'src/locales';\r\n// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Card from '@mui/material/Card';\r\nimport Table from '@mui/material/Table';\r\nimport Container from '@mui/material/Container';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\n\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\n// components\r\nimport Scrollbar from 'src/components/scrollbar';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\r\nimport CustomersListDialog from 'src/screens/components/reports/invoiceForCustomers/customersListDialog';\r\n// Data Access\r\nimport { GetAllCustomersWithAll } from 'src/data-access/customers';\r\nimport { getInvoiceForCustomers } from 'src/data-access/invoice';\r\n\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TablePaginationCustom,\r\n} from 'src/components/table';\r\n// DATA ACCESS\r\nimport { getAgingReport } from 'src/data-access/reports';\r\nimport InvoiceTableToolbar from './InvoiceTableToolbar';\r\n// COMPONENTS\r\nimport TableRowNew from './tableRow';\r\n\r\n\r\n// ----------------------------------------------------------------------\r\nconst defaultFilters = {\r\n  name: '',\r\n  startDate: null,\r\n  endDate: null,\r\n};\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function InvoiceForCustomersView() {\r\n  const theme = useTheme();\r\n\r\n  const settings = useSettingsContext();\r\n\r\n  const router = useRouter();\r\n\r\n  const { t } = useLocales()\r\n  const Translate = (text) => t(text);\r\n\r\n  const table = useTable({ defaultOrderBy: 'issueInvoiceDate' });\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [customersList, setCustomersList] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState('');\r\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchCustomers = async () => {\r\n      try {\r\n        const result = await GetAllCustomersWithAll();\r\n        console.log('Result: ', result);\r\n        setCustomersList(result);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCustomers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await getInvoiceForCustomers(selectedCustomers);\r\n        setTableData(result);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedCustomers]);\r\n\r\n  const [filters, setFilters] = useState(defaultFilters);\r\n\r\n\r\n  const dateError =\r\n    filters.startDate && filters.endDate\r\n      ? filters.startDate.getTime() > filters.endDate.getTime()\r\n      : false;\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(table.order, table.orderBy),\r\n    filters,\r\n    dateError,\r\n  });\r\n\r\n  \r\n  // const dataInPage = dataFiltered.slice(\r\n  //   table.page * table.rowsPerPage,\r\n  //   table.page * table.rowsPerPage + table.rowsPerPage\r\n  // );\r\n\r\n\r\n\r\n  const denseHeight = table.dense ? 56 : 76;\r\n\r\n  const canReset =\r\n    !!filters.name ||\r\n    (!!filters.startDate && !!filters.endDate);\r\n\r\n  const notFound = (!dataFiltered.length && canReset) || !dataFiltered.length;\r\n\r\n  const TABLE_HEAD = [\r\n    { id: 'invoiceNumber', label: Translate(\"invoiceNumber\") },\r\n    { id: 'issueInvoiceDate', label: Translate(\"issueInvoiceDate\") },\r\n    { id: 'daysToCollected', label: Translate(\"daysToCollected\") },\r\n    { id: 'invoiceAmount', label: Translate(\"invoiceAmount\") },\r\n    // { id: 'customerNameAr', label: Translate(\"customerNameAr\") },\r\n    { id: 'paidStatus', label: Translate(\"paidStatus\"), align: 'center' },\r\n    { id: 'department', label: Translate(\"department\"), align: 'center' },\r\n  ];\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'lg'}>\r\n        <CustomBreadcrumbs\r\n          heading={Translate(\"invoicesForCustomer\")}\r\n          links={[\r\n            {\r\n              name: Translate(\"app\"),\r\n              href: paths.dashboard.root,\r\n            },\r\n            {\r\n              name: Translate(\"reports\"),\r\n            },\r\n            {\r\n              name: Translate(\"invoicesForCustomer\"),\r\n            },\r\n          ]}\r\n          \r\n          sx={{\r\n            mb: { xs: 3, md: 5 },\r\n          }}\r\n        />\r\n\r\n        <Card sx={{ mb: 3 }}>\r\n          <InvoiceTableToolbar \r\n            handleOpen={() => setOpen(true)}\r\n            customers={customersList}\r\n            selectedCustomers={selectedCustomers}\r\n            onChange={(value) => setSelectedCustomers(value)}\r\n          />\r\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\r\n            <Scrollbar>\r\n              <Table size={table.dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\r\n                <TableHeadCustom\r\n                  order={table.order}\r\n                  orderBy={table.orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={tableData.length}\r\n                  numSelected={table.selected.length}\r\n                  onSort={table.onSort}\r\n                  // onSelectAllRows={(checked) =>\r\n                  //   table.onSelectAllRows(\r\n                  //     checked,\r\n                  //     tableData.map((row) => row.id)\r\n                  //   )\r\n                  // }\r\n                />\r\n\r\n                <TableBody>\r\n                  {dataFiltered.length > 0 && dataFiltered\r\n                    .slice(\r\n                      table.page * table.rowsPerPage,\r\n                      table.page * table.rowsPerPage + table.rowsPerPage\r\n                    )\r\n                    .map((row, index) => (\r\n                      <TableRowNew\r\n                        key={index}\r\n                        row={row}\r\n                        selected={table.selected.includes(row.id)}\r\n                      />\r\n                    ))}\r\n\r\n                  {/* <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(table.page, table.rowsPerPage, tableData.length)}\r\n                  /> */}\r\n\r\n                  <TableNoData notFound={notFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </Scrollbar>\r\n          </TableContainer>\r\n\r\n          <TablePaginationCustom\r\n            count={dataFiltered.length || 0}\r\n            page={table.page}\r\n            rowsPerPage={table.rowsPerPage}\r\n            onPageChange={table.onChangePage}\r\n            onRowsPerPageChange={table.onChangeRowsPerPage}\r\n            //\r\n            dense={table.dense}\r\n            onChangeDense={table.onChangeDense}\r\n          />\r\n\r\n\r\n           \r\n        </Card>\r\n        {/* <Card  sx={{ display:'flex', justifyContent: 'center', mb: 3 }}>\r\n          <DonutChart data={dataFiltered}/>  \r\n        </Card>     */}\r\n\r\n        <CustomersListDialog \r\n          title={Translate(\"customers\")}\r\n          list={customersList}  \r\n          open={open}\r\n          onClose={() => setOpen(false)}  \r\n          selected={(id) => selectedCustomer === id}        \r\n          onSelect={(value) => setSelectedCustomer(value.id)}\r\n        />\r\n      </Container>\r\n      \r\n  );\r\n}\r\n\r\nfunction applyFilter({ inputData, comparator, filters, dateError }) {\r\n  console.log(inputData)\r\n  return inputData;\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\nimport InvoiceForCustomersView from 'src/screens/components/reports/invoiceForCustomers/invoiceForCustomersView';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function InvoiceForCustomersViewMain() {\r\n\r\n  return (\r\n    <>\r\n        <Helmet>\r\n            <title> Invoice For Customers Report</title>\r\n        </Helmet>\r\n        <InvoiceForCustomersView />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n"],"names":["baseUrl","getAllCustomers","_getAllCustomers","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","list","wrap","_context","prev","next","fetch","concat","mode","then","result","json","invoices","catch","error","console","log","abrupt","stop","GetAllCustomersWithAll","_GetAllCustomersWithAll","_callee2","_context2","push","_toConsumableArray","getSalesPersonList","_getSalesPersonList","_callee3","_context3","getCustomerById","_x","_getCustomerById","_callee4","id","response","invoice","_context4","sent","ok","status","statusText","t0","deleteCustomer","_x2","_deleteCustomer","_callee5","success","_context5","method","headers","Cache","res","Error","getAllInvoices","_getAllInvoices","getInvoicesByDepartment","_getInvoicesByDepartment","getInvoicesBySalesConfirmation","_getInvoicesBySalesConfirmation","confirmStatus","url","getInvoicesById","_x3","_getInvoicesById","getInvoiceEditUrl","departmentId","invoiceId","getInvoiceRedirectUrl","paths","departments","operation","installation","sales","collection","tenderAndConract","getInvoiceImportUrl","getAddAttachmentUrl","getCollectionData","_getCollectionData","getInvoiceInquiryData","_x4","_getInvoiceInquiryData","_callee6","data","_context6","getInvoiceForCustomers","_x5","_getInvoiceForCustomers","_callee7","customers","queryData","_context7","reduce","acc","customer","deleteInvoice","_x6","_deleteInvoice","_callee8","_context8","CustomersListDialog","_ref","_ref$title","title","action","open","onClose","selected","onSelect","_useState","useState","_useState2","_slicedToArray","searchAddress","setSearchAddress","_useState3","_useState4","dataFiltered","_ref3","inputData","query","filter","address","customerCode","toLowerCase","indexOf","customerNameEn","customerNameAr","applyFilter","t","useLocales","Translate","text","notFound","length","handleSearchAddress","useCallback","event","target","value","handleSelectAddress","renderList","_jsx","Stack","spacing","sx","p","maxHeight","overflowX","children","map","index","_jsxs","component","ListItemButton","onClick","_defineProperty","py","px","borderRadius","flexDirection","alignItems","listItemButtonClasses","bgcolor","direction","Typography","variant","color","Dialog","fullWidth","maxWidth","justifyContent","pr","pt","TextField","onChange","placeholder","InputProps","startAdornment","InputAdornment","position","Iconify","icon","SearchNotFound","pb","InvoiceTableToolbar","selectedCustomers","handleOpen","xs","md","FormControl","flexShrink","width","InputLabel","Select","multiple","input","OutlinedInput","label","renderValue","textTransform","option","MenuItem","Checkbox","disableRipple","size","checked","includes","TableRowNew","row","issueInvoiceDate","isPercentage","invoiceNo","invoiceAmount","daysToCollected","paidStatus","department","TableRow","hover","TableCell","display","Avatar","alt","mr","charAt","toUpperCase","ListItemText","disableTypography","primary","noWrap","format","Date","secondary","primaryTypographyProps","typography","secondaryTypographyProps","mt","align","defaultFilters","name","startDate","endDate","InvoiceForCustomersView","useTheme","settings","useSettingsContext","useRouter","table","useTable","defaultOrderBy","tableData","setTableData","customersList","setCustomersList","_useState5","_useState6","selectedCustomer","setSelectedCustomer","_useState7","_useState8","setSelectedCustomers","_useState9","_useState10","setOpen","useEffect","fetchCustomers","fetchData","_ref2","_useState11","_useState12","filters","dateError","getTime","comparator","getComparator","order","orderBy","canReset","dense","TABLE_HEAD","Container","themeStretch","CustomBreadcrumbs","heading","links","href","dashboard","root","mb","Card","TableContainer","overflow","Scrollbar","Table","minWidth","TableHeadCustom","headLabel","rowCount","numSelected","onSort","TableBody","slice","page","rowsPerPage","TableNoData","TablePaginationCustom","count","onPageChange","onChangePage","onRowsPerPageChange","onChangeRowsPerPage","onChangeDense","InvoiceForCustomersViewMain","_Fragment","Helmet"],"sourceRoot":""}